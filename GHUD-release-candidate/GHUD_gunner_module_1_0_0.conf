name: GHUD Gunner module v1.0.0
pvp: true

slots:
    core:
        class: CoreUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    databank:
        class: DatabankUnit
        select: manual
    screen:
        class: ScreenUnit
        select: manual    

handlers:
    unit:
        onStart:
            lua: |
                -- GEMINI FOUNDATION

                --Gunner module
                HUD_version = '1.0.0'

                --LUA parameters
                GHUD_radarWidget_on_top = false --export: Radar widget position
                GHUD_weapon_panels = 3 --export: Set 3 or 2
                GHUD_export_mode = false --export: Target Vector export mode
                targetSpeed = 29999 --export: Target Vector speed
                GHUD_background_color = "#142027" --export: Background HUD color
                GHUD_AR_sight_size = 100 --export: AR sight size
                GHUD_AR_sight_color = "rgba(0, 191, 255, 0.7)" --export: AR sight color
                GHUD_radar_notifications_border_radius = true --export:
                GHUD_radar_notifications_border_color = 'black' --export:
                GHUD_radar_notifications_text_color = 'black' --export:
                GHUD_radar_notifications_background_color = 'rgb(255, 177, 44)' --export:
                GHUD_radar_notifications_Y = 10 --export:
                GHUD_show_hits = true --export: Show hits animations
                GHUD_show_misses = true --export: Show misses animations
                GHUD_hits_misses_Y = 76 --export:
                GHUD_hit_X = 56.5 --export:
                GHUD_miss_X = 47.5 --export:
                GHUD_allies_count = 8 --export: Max count of displayed allies. Selected ally will always be displayed
                GHUD_allies_color = "rgb(0, 191, 255)" --export:
                GHUD_allied_names_color = "rgb(0, 191, 255)" --export:
                GHUD_show_AR_allies_marks = true --export:
                GHUD_AR_allies_border_size = 400 --export:
                GHUD_AR_allies_border_color = "#0cf27b" --export:
                GHUD_AR_allies_font_color = "#0cf27b" --export:
                GHUD_targets_color = "#fc033d" --export:
                GHUD_safeNotifications = false --export: on/off radar notifications in safe zone
                GHUD_selected_border_color = "rgb(0, 191, 255)" --export:
                GHUD_target_names_color = "#fc033d" --export:
                GHUD_allies_distance_color = "rgb(0, 191, 255)" --export:
                GHUD_distance_color = "rgb(0, 191, 255)" --export:
                GHUD_speed_color = "rgb(0, 191, 255)" --export:
                GHUD_count_color = "rgb(0, 191, 255)" --export:
                GHUD_your_ship_ID_color = "#fca503" --export:
                GHUD_border_color = "black" --export:
                GHUD_allies_Y = 0 --export: set to 0 if playing in fullscreen mode
                GHUD_windowed_mode = false --export: adds 2 to height GHUD_allies_Y
                collectgarbages = false --export: experimental
                --GHUD_radar_notifications_mac_os_style = false

                if GHUD_radar_notifications_border_radius == true then
                GHUD_border_radius = '15px'
                else
                GHUD_border_radius = 'none'
                end

                GHUD_allies_count1 = GHUD_allies_count + 1

                if GHUD_windowed_mode then
                GHUD_allies_Y = 2
                end

                GHUD_show_echoes = false

                if GHUD_show_echoes == true then
                statusY = 13.5
                else
                statusY = 6
                end

                --vars
                atlas = require("atlas")
                activeRadar = radar_1
                activeRadar.setSortMethod(1)
                shift = false
                lalt = false
                radarIDs = {}
                idN = 0
                GHUD_show_allies = true
                screenHeight = system.getScreenHeight()
                screenWidth = system.getScreenWidth()
                startTime = system.getArkTime()
                lastHitTime = {}
                lastMissTime = {}
                hits = {}
                misses = {}
                hitAnimations = 0
                missAnimations = 0
                totalDamage = {}
                mRadar = {}
                mWeapons = {}
                size = {'XL','L','M','S','XS','ALL'}
                defaultSize = 'ALL'
                sizeState = 6
                focus = ''
                gunnerHUD = ''
                vectorHUD = ''
                downB = false
                upB = false
                atmovar = false
                endload = 0
                znak = '' --target speed icon
                newcolor = "white"
                dist1=0
                dist3=0
                probil = 0
                playerName = system.getPlayerName(player.getId())
                warpScan = 0 --for 3D map
                t_radarEnter = {}
                loglist = {}
                radarTarget = nil
                newWhitelist = {}
                radarStatic = {}
                radarDynamic = {}
                radarStaticWidget = {}
                radarStaticData = {}
                radarDynamicWidget = {}
                radarDynamicData = {}
                radarWidget = ''
                targets = {}
                target = {}
                count = 0
                gearB = false
                helper = false
                helper1 = false
                friendsData = {}
                pp1 = ''
                shipName = construct.getName()
                local scID = construct.getId()
                system.print(''..shipName..': '..scID..'')
                conID = tostring(scID):sub(-3)

                GHUD_friendly_IDs = {}

                local dbkeys = databank_2.getNbKeys()

                if dbkeys > 0 then
                for i = 1, dbkeys do
                    table.insert(GHUD_friendly_IDs,databank_2.getIntValue(i))
                end
                system.print('Databank whitelist loaded')
                end

                function checkWhitelist()
                local whitelist = GHUD_friendly_IDs
                local set = {}
                for _, l in ipairs(whitelist) do set[l] = true end
                return set
                end

                function table.contains(table, element)
                for _, value in pairs(table) do
                    if value == element then
                        return true
                    end
                end
                return false
                end

                whitelist = checkWhitelist() --load IDs
                local pauseAfter = 100 --radar widget coroutine

                radarWidgetScale = 2
                radarWidgetScaleDisplay = '<div class="measures"><span>0 SU</span><span>1 SU</span><span>2 SU</span></div>'

                --radar widget
                function defaultRadar()
                sizeState = 6
                defaultSize = 'ALL'
                if mRadar.friendlyMode == true then mRadar.friendlyMode = false end
                end

                function mRadar:createWidget()
                self.dataID = self.system.createData(activeRadar.getWidgetData())
                radarPanel = self.system.createWidgetPanel('')
                radarWidget = self.system.createWidget(radarPanel, activeRadar.getWidgetType())
                self.system.addDataToWidget(self.dataID, radarWidget)
                end

                function mRadar:createWidgetNew()
                self.dataID = self.system.createData(activeRadar.getWidgetData())
                radarWidget = self.system.createWidget(radarPanel, activeRadar.getWidgetType())
                self.system.addDataToWidget(self.dataID, radarWidget)
                end

                function mRadar:deleteWidget()
                self.system.destroyData(self.dataID)
                self.system.destroyWidget(radarWidget)
                end

                function mRadar:updateLoop()
                while true do
                    self:updateStep()
                    coroutine.yield()
                end
                end

                function mRadar:updateStep()
                local resultList = {}
                local data = activeRadar.getWidgetData()
                local constructList = data:gmatch('({"constructId":".-%b{}.-})')
                local isIDFiltered = next(self.idFilter) ~= nil
                local i = 0
                for str in constructList do
                    i = i + 1
                    if i%pauseAfter==0 then
                        coroutine.yield()
                    end
                    local ID = tonumber(str:match('"constructId":"([%d]*)"'))
                    local size = activeRadar.getConstructCoreSize(ID)
                    local locked = activeRadar.isConstructIdentified(ID)
                    local alive = activeRadar.isConstructAbandoned(ID)
                    local selectedTarget = activeRadar.getTargetId(ID)
                    if locked == 1 or alive == 0 or selectedTarget == ID and size ~= "" then --show only locked or alive or selected targets
                        if defaultSize == 'ALL' then --default mode
                            if ((whitelist[ID]==true or activeRadar.hasMatchingTransponder(ID)==1) ~= self.friendlyMode) and activeRadar.getThreatRateFrom(ID) <= 2 then  --show attacking traitor on widget
                            goto continue1
                            end
                            if isIDFiltered and self.idFilter[ID%1000] ~= true then
                            goto continue1
                            end
                            resultList[#resultList+1] = str:gsub('"name":"(.+)"', '"name":"' .. tostring(ID):sub(-3) .. ' - %1"')
                            ::continue1::
                        elseif size == defaultSize then
                            if ((whitelist[ID]==true or activeRadar.hasMatchingTransponder(ID)==1) ~= self.friendlyMode) and activeRadar.getThreatRateFrom(ID) <= 2 then
                            goto continue2
                            end
                            if isIDFiltered and self.idFilter[ID%1000] ~= true then
                            goto continue2
                            end
                            resultList[#resultList+1] = str:gsub('"name":"(.+)"', '"name":"' .. tostring(ID):sub(-3) .. ' - %1"')
                            ::continue2::
                        end
                    end
                end
                local filterMsg = (isIDFiltered and ''..focus..' - FOCUS - ' or '') .. (self.friendlyMode and ''..defaultSize..' - Friends' or ''..defaultSize..' - Enemies')
                --local postData = data:match('"elementId":".+') --deprecated
                local postData = data:match('"currentTargetId":".+')
                postData = postData:gsub('"errorMessage":""', '"errorMessage":"' .. filterMsg .. '"') --filter data
                data = '{"constructsList":[' .. table.concat(resultList, ",") .. "]," .. postData --completed json radar data
                self.system.updateData(self.dataID, data)
                end

                function mRadar:onUpdate()
                coroutine.resume(self.updaterCoroutine)
                end

                function mRadar:clearIDFilter()
                self.idFilter = {}
                end

                function mRadar:addIDFilter(id)
                self.idFilter[id] = true
                end

                --pvp focus mode
                function mRadar:onTextInput(text)
                self:clearIDFilter()
                focus = text:sub(-3)
                defaultRadar()
                if focus == 'f' then
                    system.print('Focus mode deactivated')
                else
                    system.print('Focus ID: '..focus)
                end
                for id in text:gmatch('%D(%d%d%d)') do
                    self:addIDFilter(tonumber(id))
                end
                end

                function mRadar:toggleFriendlyMode()
                self.friendlyMode = not self.friendlyMode
                end

                function mRadar:new(sys)
                local mRadar = {}
                setmetatable(mRadar, self)
                self.system = sys
                self.friendlyMode = false
                self.onlyIdentified = false
                self.idFilter = {}
                self:createWidget()
                --self.dataID = self.system.createData(activeRadar.getWidgetData())
                --self.radarPanel = self.system.createWidgetPanel('')
                --self.radarWidget = self.system.createWidget(self.radarPanel, activeRadar.getWidgetType())
                --self.system.addDataToWidget(self.dataID, self.radarWidget)
                self.updaterCoroutine = coroutine.create(function() self:updateLoop() end)
                return self
                end

                --weapon widgets
                local oldAnimationTime = {}
                local oldWeaponStatus = {}
                local oldFireReady = {}
                local OldoutOfZone = {}
                local oldTargetConstruct = {}
                local oldHitProbability = {}

                function mWeapons:createWidgets()
                if not (type(self.weapons) == 'table' and #self.weapons > 0) then
                    return
                end
                local widgetPanelID
                for i, weap in ipairs(self.weapons) do
                    if (i-1) % self.weaponsPerPanel == 0 then
                        widgetPanelID = self.system.createWidgetPanel('')
                    end
                    local weaponDataID = self.system.createData(weap.getWidgetData())
                    self.weaponData[weaponDataID] = weap
                    oldAnimationTime[weaponDataID] = 0
                    self.system.addDataToWidget(weaponDataID, self.system.createWidget(widgetPanelID, weap.getWidgetType()))
                end
                end

                function mWeapons:onUpdate()
                for weaponDataID, weap in pairs(self.weaponData) do
                    local weaponData = weap.getWidgetData()
                    local weaponStatus = weaponData:match('"weaponStatus":(%d+)')
                    local animationTime = tonumber(weaponData:match('"cycleAnimationRemainingTime":(.-),'))
                    local fireReady = weaponData:match('"fireReady":(.-),')
                    local outOfZone = weaponData:match('"outOfZone":(.-),')
                    local targetConstructID = weaponData:match('"constructId":"(.-)"')
                    local hitProbability = weaponData:match('"hitProbability":(.-),')
                    local hitP = math.floor(tonumber(hitProbability) * 100)
                    local animationChanged = animationTime > oldAnimationTime[weaponDataID]
                    oldAnimationTime[weaponDataID] = animationTime

                    if weaponStatus == oldWeaponStatus[weaponDataID] and oldTargetConstruct[weaponDataID] == targetConstructID and oldFireReady[weaponDataID] == fireReady and OldoutOfZone[weaponDataID] == outOfZone and oldHitProbability[weaponDataID] == hitProbability and not animationChanged then
                        goto continue
                    end
                    oldWeaponStatus[weaponDataID] = weaponStatus
                    oldFireReady[weaponDataID] = fireReady
                    OldoutOfZone[weaponDataID] = outOfZone
                    oldTargetConstruct[weaponDataID] = targetConstructID
                    oldHitProbability[weaponDataID] = hitProbability

                    local ammoName = weaponData:match('"ammoName":"(.-)"')

                    local ammoType1 = ""
                    if ammoName:match("Antimatter") then
                        ammoType1 = "AM"
                    elseif ammoName:match("Electromagnetic") then
                        ammoType1 = "EM"
                    elseif ammoName:match("Kinetic") then
                        ammoType1 = "KI"
                    elseif ammoName:match("Thermic") then
                        ammoType1 = "TH"
                    elseif ammoName:match("Stasis") then
                        ammoType1 = "Stasis"
                    end

                    local ammoType2 = ""
                    if ammoName:match("Precision") then
                        ammoType2 = "Prec"
                    elseif ammoName:match("Heavy") then
                        ammoType2 = "Heavy"
                    elseif ammoName:match("Agile") then
                        ammoType2 = "Agile"
                    elseif ammoName:match("Defense") then
                        ammoType2 = "Def"
                    end

                    weaponData = weaponData:gsub('"constructId":"(%d+(%d%d%d))","name":"(.?.?.?.?).-"', '"constructId":"%1","name":"%2 - %3"')
                    weaponData = weaponData:gsub('"ammoName":"(.-)"', '"ammoName":"' .. hitP .. '%% - ' .. ammoType1 .. ' ' .. ammoType2 .. '"')
                    --weaponData = weaponData:gsub('"constructId":"(%d+(%d%d%d))","name":"(.?.?.?.?.?.?.?.?.?.?.?.?.?.?).-"', '"constructId":"%1","name":"%2 - %3"')

                    if self.system.updateData(weaponDataID, weaponData) ~= 1 then
                        self.system.print('update error')
                    end

                    ::continue::
                end
                end

                function mWeapons:new(sys, weapons, weaponsPerPanel)
                local mWeapons = {}
                setmetatable(mWeapons, self)
                self.system = sys
                self.weapons = weapons
                self.weaponsPerPanel = weaponsPerPanel or 3
                self.weaponData = {}
                self:createWidgets()
                return self
                end

                --debug coroutine
                function coroutine.xpcall(co)
                local output = {coroutine.resume(co)}
                if output[1] == false then
                    local tb = traceback(co)

                    local message = tb:gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk')
                    system.print(message)

                    message = output[2]:gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk')
                    system.print(message)
                    return false, output[2], tb
                end
                return table.unpack(output)
                end

                function ConvertLocalToWorld(x,y,z)
                local xOffset = x * vec3(construct.getWorldRight())
                local yOffset = y * vec3(construct.getWorldForward())
                local zOffset = z * vec3(construct.getWorldUp())

                return xOffset + yOffset + zOffset + vec3(construct.getWorldPosition())
                end

                if GHUD_radarWidget_on_top == true then
                mRadar = mRadar:new(system) --radar widget
                if weapon_1 ~= nil then
                mWeapons = mWeapons:new(system, weapon, GHUD_weapon_panels) --weapon widgets
                end
                else
                if weapon_1 ~= nil then
                mWeapons = mWeapons:new(system, weapon, GHUD_weapon_panels)
                end
                mRadar = mRadar:new(system)
                end

                --main gunner function
                function main()
                while true do
                    local i = 0
                    local htmltext = ""
                    local hudver = ""
                    local htmltext2 = ""
                    local friendlies = 0
                    local countLock = 0
                    local countAttacked = 0
                    local list, list2, lockList = "", "", ""
                    local islockList = ""
                    local caption = ""
                    local captionL = ""
                    local target1 = ""
                    local locks = ""
                    local statusSVG = ""
                    local captionText = ""
                    local okcolor = ""
                    local captionLcolor = ""
                    radarTarget = {}
                    radarStatic = {}
                    radarDynamic = {}
                    radarDynamicData = radarDynamicWidget
                    radarDynamicWidget = {}
                    radarStaticData = radarStaticWidget
                    radarStaticWidget = {}
                    if radar_2 ~= nil then
                        if radar_1.getOperationalState() == -1 and atmovar == false then
                            atmovar = true
                            activeRadar = radar_2
                            mRadar:deleteWidget()
                            mRadar:createWidgetNew()
                            radarWidgetScale = 160
                            radarWidgetScaleDisplay = '<div class="measures"><span>0 KM</span><span>2.5 KM</span><span>5 KM</span></div>'
                            activeRadar.setSortMethod(1)
                        end
                        if radar_1.getOperationalState() == 1 and atmovar == true then
                            atmovar = false
                            activeRadar = radar_1
                            mRadar:deleteWidget()
                            mRadar:createWidgetNew()
                            radarWidgetScale = 2
                            radarWidgetScaleDisplay = '<div class="measures"><span>0 SU</span><span>1 SU</span><span>2 SU</span></div>'
                            activeRadar.setSortMethod(1)
                        end
                    end
                    for k,v in pairs(radarIDs) do
                        i = i + 1
                        local size = activeRadar.getConstructCoreSize(v)
                        local constructRow = {}
                            if t_radarEnter[v] ~= nil then
                            if activeRadar.hasMatchingTransponder(v) == 0 and not whitelist[v] and size ~= "" and activeRadar.getConstructDistance(v) < 600000 then --do not show far targets during warp and server lag
                                local name = activeRadar.getConstructName(v)
                                if activeRadar.isConstructAbandoned(v) == 0 then
                                    local msg = 'NEW TARGET: '..name..' - Size: '..size..' - '..v..'\n '..t_radarEnter[v].pos..''
                                    table.insert(loglist, msg)
                                    if count < 10 then --max 10 notifications
                                        count = count + 1
                                        if target[count] == nil then
                                        target[count] = {left = 100, opacity = 1, cnt = count, name1 = name, size1 = size, id = tostring(v):sub(-3), one = true, check = true, delay = 0}
                                        end
                                        system.playSound('enter.mp3')
                                    end
                                else
                                    local pos = activeRadar.getConstructWorldPos(v)
                                    pos = '::pos{0,0,'..pos[1]..','..pos[2]..','..pos[3]..'}'
                                    local msg = 'NEW TARGET (abandoned): '..name..' - Size: '..size..' - '..v..'\n '..pos..''
                                    table.insert(loglist, msg)
                                    if count < 10 then --max 10 notifications
                                        count = count + 1
                                        if target[count] == nil then
                                        target[count] = {left = 100, opacity = 1, cnt = count, name1 = name, size1 = size, id = tostring(v):sub(-3), one = true, check = true, delay = 0}
                                        end
                                    end
                                    system.playSound('sonar.mp3')
                                end
                            end
                            t_radarEnter[v] = nil
                            end
                        if GHUD_show_echoes == true then
                            if size ~= "" then
                            constructRow.widgetDist = math.ceil(activeRadar.getConstructDistance(v) / 1000 * radarWidgetScale)
                            end
                        end
                        --radarlist
                        if GHUD_show_allies == true and size ~= "" then
                            if activeRadar.hasMatchingTransponder(v) == 1 or whitelist[v] then
                            local name = activeRadar.getConstructName(v)
                            local dist = math.floor(activeRadar.getConstructDistance(v))
                                local ownerTag = ''
                                if activeRadar.hasMatchingTransponder(v) == 1 then   
                                local owner = activeRadar.getConstructOwnerEntity(v)
                                if owner['isOrganization'] then
                                    ownerTag = system.getOrganization(owner['id']).tag
                                    friendsData[v] = {tag = ownerTag}
                                else
                                    ownerTag = system.getPlayerName(owner['id'])
                                    friendsData[v] = {tag = ownerTag}
                                end
                            else
                                ownerTag = 'DB'
                            end
                            if dist >= 1000 then
                                dist = ''..string.format('%0.1f', dist/1000)..' km ('..string.format('%0.2f', dist/200000)..' su)'
                            else
                                dist = ''..dist..' m'
                            end
                            local allID = tostring(v):sub(-3)
                            local nameA = ''..allID..' '..name..''
                            friendlies = friendlies + 1
                            if activeRadar.getTargetId(v) ~= v and friendlies < GHUD_allies_count1 then
                                list = list..[[
                                <div class="table-row3 th3">
                                <div class="table-cell3">
                                ]]..'['..size..'] '..nameA.. [[ <allyborder>]]..ownerTag..[[</allyborder><br><distalliescolor>]] ..dist.. [[</distalliescolor>
                                </div>
                                </div>]]
                            end
                            if activeRadar.getTargetId(v) == v and friendlies < GHUD_allies_count1 then
                                list = list..[[
                                <div class="table-row3 th3S">
                                <div class="table-cell3S">
                                ]]..'['..size..'] '..nameA.. [[ <allyborder>]]..ownerTag..[[</allyborder><br><distalliescolor>]] ..dist.. [[</distalliescolor>
                                </div>
                                </div>]]
                            end
                            if activeRadar.getTargetId(v) == v and friendlies >= GHUD_allies_count1 then
                                list = list..[[
                                <div class="table-row3 th3S">
                                <div class="table-cell3S">
                                ]]..'['..size..'] '..nameA.. [[ <allyborder>]]..ownerTag..[[</allyborder><br><distalliescolor>]] ..dist.. [[</distalliescolor>
                                </div>
                                </div>]]
                            end
                            end
                        end
                        --targets
                        local speed = 0
                        local radspeed = 0
                        local angspeed = 0
                        if activeRadar.isConstructIdentified(v) == 1 and size ~= "" then
                            local name = activeRadar.getConstructName(v)
                            local dist = math.floor(activeRadar.getConstructDistance(v))
                            if dist >= 1000 then
                            dist = ''..string.format('%0.1f', dist/1000)..' km ('..string.format('%0.2f', dist/200000)..' su)'
                            else
                            dist = ''..dist..' m'
                            end
                            local IDT = tostring(v):sub(-3)
                            local nameIDENT = ''..IDT..' '..name..''
                            --local nameT = string.sub((""..nameIDENT..""),1,11)
                            --table.insert(radarTarget, constructRow)
                            isILock = true
                            speed = math.floor(activeRadar.getConstructSpeed(v) * 3.6)
                            if activeRadar.getTargetId(v) == v then
                            islockList = islockList..[[
                            <div class="table-row2 thS">
                            <div class="table-cellS">
                            ]]..'['..size..'] '..nameIDENT.. [[ <speedcolor> ]] ..speed.. [[ km/h</speedcolor><br><distcolor>]] ..dist.. [[</distcolor>
                            </div>
                            </div>]]
                            else
                            islockList = islockList..[[
                            <div class="table-row2 th2">
                            <div class="table-cell2">
                            ]]..'['..size..'] '..nameIDENT.. [[ <speedcolor> ]] ..speed.. [[ km/h</speedcolor><br><distcolor>]] ..dist.. [[</distcolor>
                            </div>
                            </div>]]
                            end
                        else

                            if GHUD_show_echoes == true then
                            if size ~= "" then
                                if activeRadar.getConstructKind(v) == 5 then
                                    table.insert(radarDynamic, constructRow)
                                    if radarDynamicWidget[constructRow.widgetDist] ~= nil then
                                        radarDynamicWidget[constructRow.widgetDist] = radarDynamicWidget[constructRow.widgetDist] + 1
                                    else
                                        radarDynamicWidget[constructRow.widgetDist] = 1
                                    end
                                else
                                    table.insert(radarStatic, constructRow)
                                    if radarStaticWidget[constructRow.widgetDist] ~= nil then
                                        radarStaticWidget[constructRow.widgetDist] = radarStaticWidget[constructRow.widgetDist] + 1
                                    else
                                        radarStaticWidget[constructRow.widgetDist] = 1
                                    end
                                end
                            end
                            end
                        end
                        --lockstatus
                        if (activeRadar.getThreatRateFrom(v) == 2 or activeRadar.getThreatRateFrom(v) == 3 or activeRadar.getThreatRateFrom(v) == 5) and size ~= "" then
                            countLock = countLock + 1
                            local name = string.sub((""..activeRadar.getConstructName(v)..""),1,11)
                            local dist = math.floor(activeRadar.getConstructDistance(v))
                            if dist >= 1000 then
                            dist = ''..string.format('%0.1f', dist/1000)..' km ('..string.format('%0.2f', dist/200000)..' su)'
                            else
                            dist = ''..dist..' m'
                            end
                            local loclIDT = tostring(v):sub(-3)
                            local nameLOCK = ''..loclIDT..' '..name..''
                            if activeRadar.getThreatRateFrom(v) == 5 then
                            countAttacked = countAttacked + 1
                            lockList = lockList..[[
                            <div class="table-row th">
                            <div class="lockedT">
                            <redcolor1>]]..'['..size..'] '..nameLOCK.. [[</redcolor1><br><distcolor>]] ..dist.. [[</distcolor>
                            </div>
                            </div>]]
                            else
                            lockList = lockList..[[
                            <div class="table-row th">
                            <div class="lockedT">
                            <orangecolor>]]..'['..size..'] '..nameLOCK.. [[</orangecolor><br><distcolor>]] ..dist.. [[</distcolor>
                            </div>
                            </div>]]
                            end
                        end
                        if i > 50 then
                            i = 0
                            coroutine.yield()
                        end
                    end
                    if GHUD_show_allies == true then
                        if friendlies > 0 then
                            caption = "<alliescolor>Allies:</alliescolor><br><countcolor>"..friendlies.."</countcolor> <countcolor2>"..conID.."</countcolor2>"
                        else
                            caption = "<alliescolor>Allies:</alliescolor><br><countcolor>0</countcolor> <countcolor2>"..conID.."</countcolor2>"
                        end
                        htmltext = htmlbasic .. [[
                        <style>
                        .th3>.table-cell3 {
                            color: ]]..GHUD_allied_names_color..[[;
                            font-weight: bold;
                        }
                        </style>
                        <div class="table3">
                        <div class="table-row3 th3">
                        <div class="table-cell3">
                        ]]..caption..[[
                        </div>
                        </div>
                        ]]..list..[[
                        </div>]]
                    end
                    caption = "<targetscolor>Targets:</targetscolor>"
                    target1 = targetshtml .. [[
                    <style>
                    .th2>.table-cell2 {
                        color: ]]..GHUD_target_names_color..[[;
                        font-weight: bold;
                    }
                    </style>
                    <div class="table2">
                    <div class="table-row2 th2">
                    <div class="table-cell2">
                    ]] .. caption .. [[<br><countcolor>]]..idN-friendlies..[[</colorcount>
                    </div>
                    </div>
                    ]] .. islockList .. [[
                    </div>]]
                    --threat status
                    if countLock == 0 then
                        captionL = "LOCK"
                        captionLcolor = "#07e88e"
                        captionText = "OK"
                        okcolor = captionLcolor
                    else
                        captionL = "LOCKED:"
                        captionLcolor = "#FFB12C"
                        captionText = countLock
                        okcolor = "rgb(0, 191, 255)"
                    end
                    --attackers count
                    if countAttacked > 0 then
                        captionL = "ATTACKED:"
                        captionLcolor = "#fc033d"
                        captionText = countAttacked
                        okcolor = "rgb(0, 191, 255)"
                    end
                    --threat icon
                    statusSVG = [[<style>.radarLockstatus {
                        position: fixed;
                        background: transparent;
                        width: 6em;
                        padding: 1vh;
                        top: ]]..statusY..[[vh;
                        left: 50%;
                        transform: translateX(-50%);
                        text-align: center;
                        fill: ]]..captionLcolor..[[;
                    }
                    svg text{
                        text-anchor: middle;
                        dominant-baseline: middle;
                        font-size: 110px;
                        font-weight: bold;
                        fill: ]]..okcolor..[[;
                    }
                    </style>
                    <div class="radarLockstatus">
                    <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
                    <g>
                    <path d="m501,245.6h-59.7c-5.3-93.9-81-169.6-174.9-174.9v-59.7h-20.9v59.7c-93.8,5.3-169.5,81-174.8,174.9h-59.7v20.9h59.7c5.3,93.8 81,169.5 174.9,174.8v59.7h20.9v-59.7c93.9-5.3 169.6-80.9 174.8-174.8h59.7v-20.9zm-80.6,0h-48.1c-4.9-56.3-49.6-100.9-105.9-105.9v-48.1c82.5,5.2 148.8,71.5 154,154zm-69.1,20.8c-4.9,44.7-40.9,80-84.9,84.9v-31.7h-20.9v31.8c-44.8-4.8-80.1-40.1-84.9-84.9h31.8v-20.9h-31.7c4.9-44.7 40.9-80 84.9-84.9v31.7h20.9v-31.7c44,4.9 80,40.2 84.9,84.9h-31.7v20.9h31.6zm-105.7-174.9v48.1c-56.3,4.9-100.9,49.6-105.9,105.9h-48.1c5.2-82.5 71.5-148.8 154-154zm-154,174.8h48.1c4.9,56.3 49.6,100.9 105.9,105.9v48.1c-82.5-5.2-148.8-71.5-154-154zm174.8,154v-48.1c56.3-4.9 100.9-49.6 105.9-105.9h48.1c-5.2,82.5-71.5,148.8-154,154z"/>
                    </g>
                    <text x="50%" y="52%">]]..captionText..[[</text>
                    </svg>
                    </div>]]
                    locks = lockhtml .. [[
                    <style>
                    .th>.table-cell {
                        font-weight: bold;
                    }
                    </style>
                    <div class="table">
                    <div class="table-row th">
                    <div class="table-cell">
                    <rightlocked style="color: ]]..captionLcolor..[[;">]] .. captionL  .. [[</rightlocked>
                    </div>
                    </div>
                    ]] .. lockList .. [[
                    </div>]]
                    --Echoes widget
                    if GHUD_show_echoes == true then
                        local dynamic = ''
                        for k,v in pairs(radarDynamicData) do
                            dynamic = dynamic .. '<span style="left:'..k..'px;height:'..v..'px;"></span>'
                        end
                        local static = ''
                        for k,v in pairs(radarStaticData) do
                            static = static .. '<span style="left:'..k..'px;height:'..v..'px;"></span>'
                        end
                        local htmlRadar = htmlRadar .. [[
                        <div class="radar-widget">
                        <div class="d-widget">]] .. dynamic .. [[</div>
                        <div class="s-widget">]] .. static .. [[</div>
                        <div class="labels">
                        <span style="color: #6fc9ff;">DYNAMIC</span>
                        <span style="color: #ff8d00;">STATIC</span>
                        </div>
                        ]]..radarWidgetScaleDisplay..[[
                        </div>
                        ]]
                        radarWidget = htmlRadar
                    else
                        radarWidget = ''
                    end

                    hudver = hudvers .. [[<div class="hudversion">GHUD v]]..HUD_version..[[</div>]]

                    if GHUD_show_echoes == true then
                        if GHUD_show_allies == true then
                            --system.setScreen(htmltext .. target1 .. locks .. hudver .. radarWidget ..statusSVG)
                            gunnerHUD = htmltext .. target1 .. locks .. hudver .. radarWidget ..statusSVG
                        else
                            --system.setScreen(target1 .. locks .. hudver .. radarWidget ..statusSVG)
                            gunnerHUD = target1 .. locks .. hudver .. radarWidget ..statusSVG
                        end

                    else

                        if GHUD_show_allies == true then
                            --system.setScreen(htmltext .. target1 .. locks .. hudver ..statusSVG)
                            gunnerHUD = htmltext .. target1 .. locks .. hudver ..statusSVG
                        else
                            --system.setScreen(target1 .. locks .. hudver ..statusSVG)
                            gunnerHUD = target1 .. locks .. hudver ..statusSVG
                        end
                    end
                    coroutine.yield()
                end
                end

                --HUD design
                lockhtml = [[<style>
                .table {
                display: table;
                background: ]]..GHUD_background_color..[[;
                left: 0;
                top: 5vh;
                position: fixed;
                }
                .table-row {
                display: table-row;
                }
                .table-cell {
                display: table-cell;
                padding: 6px;
                border: 1px solid ]]..GHUD_border_color..[[;
                color: white;
                }
                .lockedT {
                display: table-cell;
                padding: 6px;
                border: 1px solid ]]..GHUD_border_color..[[;
                border-top: none;
                color: white;
                font-weight: bold;
                }
                orangecolor {
                color: #fca503;
                }
                redcolor1 {
                color: #fc033d;
                }
                rightlocked {
                }</style>]]
                targetshtml = [[<style>
                .table2 {
                display: table;
                background: ]]..GHUD_background_color..[[;
                position: fixed;
                top: 0;
                left: 0;
                }
                .table-row2 {
                display: table-row;
                float: left;
                }
                .table-cell2 {
                display: table-cell;
                padding: 6px;
                border: 1px solid ]]..GHUD_border_color..[[;
                color: white;
                }
                .table-cellS {
                display: table-cell;
                padding: 6px;
                border: 1px solid ]]..GHUD_selected_border_color..[[;
                color: white;
                }
                .thS>.table-cellS {
                color: ]]..GHUD_target_names_color..[[;
                font-weight: bold;
                }
                distcolor {
                font-weight: bold;
                color: ]]..GHUD_distance_color..[[;
                }
                distalliescolor {
                font-weight: bold;
                color: ]]..GHUD_allies_distance_color..[[;
                }
                speedcolor {
                font-weight: bold;
                color: ]]..GHUD_speed_color..[[;
                outline: 1px inset black;
                }
                countcolor {
                font-weight: bold;
                color: ]]..GHUD_count_color..[[;
                }
                countcolor2 {
                font-weight: bold;
                color: ]]..GHUD_your_ship_ID_color..[[;
                float: right;
                }
                chancecolor {
                color: #6affb1;
                }
                targetscolor {
                color: ]]..GHUD_targets_color..[[;
                }
                alliescolor {
                color: ]]..GHUD_allies_color..[[;
                }
                .txgrenright {
                font-weight: bold;
                text-align: right;
                color: #0cf27b;
                }
                </style>]]
                htmlbasic = [[<style>
                .table3 {
                display: table;
                background: ]]..GHUD_background_color..[[;
                font-weight: bold;
                position: fixed;
                bottom: ]]..GHUD_allies_Y..[[vh;
                left: 0;
                }
                allyborder {
                color: white;
                background-color: green;
                padding-right: 3px;
                padding-left: 3px;
                padding-top: 0.5px;
                padding-bottom: 0.5px;
                border-radius: 5px;
                border: 2px solid white;
                }
                .table-row3 {
                display: table-row;
                float: left;
                }
                .table-cell3 {
                display: table-cell;
                padding: 5px;
                border: 1px solid ]]..GHUD_border_color..[[;
                color: white;
                font-weight: bold;
                }
                .table-cell3S {
                display: table-cell;
                padding: 5px;
                border: 1px solid ]]..GHUD_selected_border_color..[[;
                color: white;
                }
                .th3S>.table-cell3S {
                color: ]]..GHUD_allied_names_color..[[;
                font-weight: bold;
                }</style>]]
                hudvers = [[
                <style>
                .hudversion {
                position: absolute;
                bottom: 0.15vh;
                color: white;
                right: 5.25vw;
                font-family: verdana;
                letter-spacing: 0.5px;
                font-size: 1.2em;
                }</style>]]

                htmlRadar = [[
                <style>
                .radar-widget {
                width: 800px;
                height: 50px;
                position: absolute;
                margin-left: auto;
                margin-right: auto;
                left: 0;
                right: 0;
                top: 8vh;
                background: radial-gradient(60% 50% at 50% 50%, rgba(60, 166, 255, .34), transparent);
                border-right: 1px solid;
                border-left: 1px solid;
                transform-style: preserve-3d;
                transform-origin: top;
                transform: perspective(120px) rotateX(-4deg);
                }
                .d-widget,
                .s-widget {
                height: 25px;
                width: 100%;
                overflow: hidden;
                position: relative;
                }
                .s-widget {
                border-top: 1px solid;
                }
                .d-widget span {
                background: linear-gradient(0deg, #b6ddff, #3ea7ff 25px);
                width: 2px;
                bottom: 0;
                position: absolute;
                }
                .s-widget span {
                background: linear-gradient(180deg, #ffd322, #ff7600 25px);
                width: 2px;
                top: 0;
                position: absolute;
                }
                .measures {
                display: flex;
                justify-content: space-between;
                font-size: 20px;
                }
                .measures span:first-child {
                transform: translateX(-50%);
                }
                .measures span:last-child {
                transform: translateX(50%);
                }
                .labels {
                display: flex;
                flex-direction: column;
                position: absolute;
                right: -60px;
                top: 0;
                height: 100%;
                justify-content: space-evenly;
                font-size: 12px;
                }
                .con-size {
                width: 20px;
                text-align: center;
                background: #235f92;
                margin-right: 4px;
                color: white;
                height: 18px;
                }
                .warp-scan {
                width: 15px;
                height: 15px;
                border-radius: 50%;
                box-sizing: border-box;
                background: #ff3a56;
                }
                </style>]]

                --interception concept, be careful
                --Dear programmer:
                --When I wrote this code, only God and I know how the next code works, don't try to edit it!

                function zeroConvertToWorldCoordinates(pos, system)
                local num = " *([+-]?%d+%.?%d*e?[+-]?%d*)"
                local posPattern = "::pos{" .. num .. "," .. num .. "," .. num .. "," .. num .. "," .. num .. "}"
                local systemId, bodyId, latitude, longitude, altitude = string.match(pos, posPattern)

                if systemId == nil or bodyId == nil or latitude == nil or longitude == nil or altitude == nil then
                    system.print("Invalid POS!")
                    return vec3()
                end

                if (systemId == "0" and bodyId == "0") then
                    --convert space bm
                    return vec3(latitude, longitude, altitude)
                end
                longitude = math.rad(longitude)
                latitude = math.rad(latitude)
                local planet = atlas[tonumber(systemId)][tonumber(bodyId)]
                local xproj = math.cos(latitude)
                local planetxyz = vec3(xproj * math.cos(longitude), xproj * math.sin(longitude), math.sin(latitude))
                return vec3(planet.center) + (planet.radius + altitude) * planetxyz
                end

                function getPipeD(system)
                if databank_1.getStringValue(1) ~= "" and databank_1.getStringValue(3) ~= "" then
                    local distanceS = ""

                    local length1 = -700 * 200000
                    local length2 = 800 * 200000

                    local pos123 = pos1
                    local pos234 = pos2

                    local pos111 = zeroConvertToWorldCoordinates(pos123, system)
                    local pos222 = zeroConvertToWorldCoordinates(pos234, system)

                    local DestinationCenter = vectorLengthen(pos111, pos222, length1)
                    local DepartureCenter = vectorLengthen(pos111, pos222, length2)

                    local worldPos = vec3(construct.getWorldPosition())
                    local pipe = (DestinationCenter - DepartureCenter):normalize()
                    local r = (worldPos - DepartureCenter):dot(pipe) / pipe:dot(pipe)
                    if r <= 0. then
                        return (worldPos - DepartureCenter):len()
                    elseif r >= (DestinationCenter - DepartureCenter):len() then
                        return (worldPos - DestinationCenter):len()
                    end
                    local L = DepartureCenter + (r * pipe)
                    local distance = (L - worldPos):len()
                    if distance < 1000 then
                        distanceS = "" .. string.format("%0.0f", distance) .. " m"
                    elseif distance < 100000 then
                        distanceS = "" .. string.format("%0.1f", distance / 1000) .. " km"
                    else
                        distanceS = "" .. string.format("%0.2f", distance / 200000) .. " su"
                    end
                    return distanceS
                end
                end

                function getPipeW(system)
                if databank_1.getStringValue(1) ~= "" and databank_1.getStringValue(3) ~= "" then
                    showMarker = false

                    local length1 = -700 * 200000
                    local length2 = 800 * 200000

                    local pos123 = pos1
                    local pos234 = pos2

                    local pos111 = zeroConvertToWorldCoordinates(pos123, system)
                    local pos222 = zeroConvertToWorldCoordinates(pos234, system)

                    local DestinationCenter = vectorLengthen(pos111, pos222, length1)
                    local DepartureCenter = vectorLengthen(pos111, pos222, length2)

                    local worldPos = vec3(construct.getWorldPosition())
                    local pipe = (DestinationCenter - DepartureCenter):normalize()
                    local r = (worldPos - DepartureCenter):dot(pipe) / pipe:dot(pipe)
                    if r <= 0. then
                        return (worldPos - DepartureCenter):len()
                    elseif r >= (DestinationCenter - DepartureCenter):len() then
                        return (worldPos - DestinationCenter):len()
                    end
                    local L = DepartureCenter + (r * pipe)
                    local PipeWaypoint = "::pos{0,0," .. math.floor(L.x) .. "," .. math.floor(L.y) .. "," .. math.floor(L.z) .. "}"
                    system.print("Pipe center")
                    system.setWaypoint(PipeWaypoint)
                end
                end

                function getPos4Vector(coordinate)
                return "::pos{0,0," .. vec3(coordinate).x .. "," .. vec3(coordinate).y .. "," .. vec3(coordinate).z .. "}"
                end

                -- делает вектор из двух координат
                function makeVector(coordinateBegin, coordinateEnd)
                local x = vec3(coordinateEnd).x - vec3(coordinateBegin).x
                local y = vec3(coordinateEnd).y - vec3(coordinateBegin).y
                local z = vec3(coordinateEnd).z - vec3(coordinateBegin).z
                return vec3(x, y, z)
                end

                function UTC()
                local T = curTime - timeZone * 3600
                return T
                end

                function UTCscaner(system)
                local T = system.getArkTime() - timeZone * 3600
                return T
                end

                -- прибавляет к вектору, из двух координат, кусочек длины
                -- и воозращает координату окончания вектора, с учетом прибалвенной длины
                function vectorLengthen(coordinateBegin, coordinateEnd, deltaLen)
                local vector = makeVector(coordinateBegin, coordinateEnd)
                --длина вектора
                local lenVector = vec3(vector):len()
                -- новая длина вектора
                local newLen = lenVector + deltaLen
                local factor = newLen / lenVector
                --новый вектор с удлиненной координатой
                local newVector = vector * factor
                -- надо прибавить к первой начальной координате полученый вектор
                local x = vec3(coordinateBegin).x + vec3(newVector).x
                local y = vec3(coordinateBegin).y + vec3(newVector).y
                local z = vec3(coordinateBegin).z + vec3(newVector).z
                -- итого координата окончания удлиненного вектора
                local resultCoordinate = vec3(x, y, z)
                return resultCoordinate
                end

                function start(unit, system, text)
                pos1time = 0
                pos2time = 0
                tspeed = 0
                tspeed1 = 0
                mmode = true
                --lalt = false

                --system.createWidgetPanel("Target Vector")
                deg2rad = math.pi / 180
                rad2deg = 180 / math.pi
                ms2kmh = 3600 / 1000
                kmh2ms = 1000 / 3600

                showMarker = true

                if GHUD_export_mode == true then
                    system.print("---------------")
                    system.print("The export mode is enabled ALT+G")
                else
                    system.print("---------------")
                    system.print("The export mode is disabled ALT+G")
                end

                SU = 10
                calcTargetSpeed = targetSpeed / 3.6
                meterMarker = 0

                if
                databank_1.getStringValue(1) ~= "" and databank_1.getFloatValue(2) ~= 0 and databank_1.getStringValue(3) ~= "" and
                databank_1.getFloatValue(4) ~= 0
                then
                    system.print("Coordinates from DB are used!")

                    pos1 = databank_1.getStringValue(1)
                    pos2 = databank_1.getStringValue(3)
                    pos1time = databank_1.getFloatValue(2)
                    pos2time = databank_1.getFloatValue(4)

                    pos11 = zeroConvertToWorldCoordinates(pos1, system)

                    pos22 = zeroConvertToWorldCoordinates(pos2, system)

                    Pos1 = pos1
                    Pos2 = pos2

                    privMySignAngleR = 0
                    privMySignAngleUp = 0
                    privTargetSignAngleR = 0
                    privTargetSignAngleUp = 0
                    targetVector = vec3.new(0, 0, 0)
                    myAngleR = 0
                    myAngleUp = 0
                    targetAngleR = 0
                    targetAngleUp = 0

                    targetVector =
                    makeVector(zeroConvertToWorldCoordinates(Pos1, system), zeroConvertToWorldCoordinates(Pos2, system))
                    targetTracker = true

                    curTime = system.getUtcTime()

                    --local dt1 = math.floor(UTC() - pos1time)
                    --local dt2 = math.floor(UTC() - pos2time)
                    local lasttime = math.floor(curTime - pos2time)
                    local dist1 = pos11:dist(pos22)
                    local timeroute = pos2time - pos1time
                    tspeed = dist1 / timeroute
                    tspeed1 = math.floor((dist1 / timeroute) * 3.6)
                    meterMarker1 = (lasttime * tspeed) + tspeed * 4

                    --length = SU*200000
                    length1 = meterMarker1
                    --lengthSU1=math.floor((length1/200000) * 100)/100
                    lengthSU1 = string.format("%0.2f", ((length1 / 200000) * 100) / 100)

                    meterMarker = (lasttime * calcTargetSpeed) + calcTargetSpeed * 4

                    --length = SU*200000
                    length = meterMarker
                    --lengthSU=math.floor((length/200000) * 100)/100
                    lengthSU = string.format("%0.2f", ((length / 200000) * 100) / 100)

                    resultVector1 = vectorLengthen(pos11, pos22, length1)
                    Waypoint1 = getPos4Vector(resultVector1)

                    system.setWaypoint(Waypoint1)

                    system.print("The target flew 20 km " .. lengthSU1 .. " su, speed " .. tspeed1 .. " km/h")

                    unit.setTimer("marker", 1)
                    --system.showScreen(1)
                    unit.setTimer("vectorhud", 0.02)
                else
                    --databank_1.clear()
                    databank_1.setStringValue(1, "")
                    databank_1.setFloatValue(2, 0)
                    databank_1.setStringValue(3, "")
                    databank_1.setFloatValue(4, 0)
                    pos1 = 0
                    pos2 = 0
                    lasttime = 0
                    pos1time = 0
                    pos2time = 0
                    meterMarker = 0
                    meterMarker1 = 0

                    Pos1 = 0
                    Pos2 = 0
                    privMySignAngleR = 0
                    privMySignAngleUp = 0
                    privTargetSignAngleR = 0
                    privTargetSignAngleUp = 0
                    targetVector = vec3.new(0, 0, 0)
                    targetTracker = false
                    myAngleR = 0
                    myAngleUp = 0
                    targetAngleR = 0
                    targetAngleUp = 0

                    system.print("Coordinates are missing set new or export")
                end
                end

                function inTEXT(unit, system, text)
                if pos1 ~= 0 and string.find(text, "::pos") and not string.find(text, "m::pos") and pos2 == 0 and GHUD_export_mode == false then
                    --local lasttime = UTCscaner()

                    pos2 = text
                    databank_1.setStringValue(3, pos2)
                    pos2time = math.floor(system.getUtcTime())
                    databank_1.setFloatValue(4, pos2time)
                    system.print(text .. " pos2 saved")

                    pos11 = zeroConvertToWorldCoordinates(pos1, system)

                    pos22 = zeroConvertToWorldCoordinates(pos2, system)

                    local dist1 = pos11:dist(pos22)
                    local timeroute = pos2time - pos1time
                    tspeed = dist1 / timeroute
                    tspeed1 = math.floor((dist1 / timeroute) * 3.6)
                    Pos1 = pos1
                    Pos2 = pos2

                    targetVector =
                    makeVector(zeroConvertToWorldCoordinates(Pos1, system), zeroConvertToWorldCoordinates(Pos2, system))
                    targetTracker = true

                    --length = SU*200000
                    --meterMarker = meterMarker + 33333.32
                    --meterMarker = meterMarker + calcTargetSpeed*4
                    meterMarker1 = meterMarker1 + tspeed * 4
                    length1 = meterMarker1

                    resultVector1 = vectorLengthen(pos11, pos22, length1)
                    Waypoint1 = getPos4Vector(resultVector1)

                    system.setWaypoint(Waypoint1)
                    meterMarker = meterMarker + calcTargetSpeed * 4
                    length = meterMarker

                    resultVector = vectorLengthen(pos11, pos22, length)
                    Waypoint = getPos4Vector(resultVector)

                    --system.setWaypoint(Waypoint)

                    system.print("---------------")
                    system.print("The coordinates are set manually!")
                    posExport1 = databank_1.getStringValue(1)
                    posExport2 = databank_1.getStringValue(3)
                    timeExport1 = math.floor(databank_1.getFloatValue(2))
                    timeExport2 = math.floor(databank_1.getFloatValue(4))

                    system.print("The coordinates were exported to screen")

                    screen_1.setCenteredText(posExport1 .. "/" .. timeExport1 .. "/" .. posExport2 .. "/" .. timeExport2)
                    system.print("Target speed: " .. tspeed1 .. " km/h")
                    unit.setTimer("marker", 1)
                    --system.showScreen(1)
                    unit.setTimer("vectorhud", 0.02)
                end

                if pos1 == 0 and string.find(text, "::pos") and not string.find(text, "m::pos") and GHUD_export_mode == false then
                    pos1 = text
                    databank_1.setStringValue(1, pos1)
                    pos1time = math.floor(system.getUtcTime())
                    databank_1.setFloatValue(2, pos1time)
                    system.print(text .. " pos1 saved")
                end

                if text == "n" then
                    pp1 = ''
                    unit.stopTimer("marker")
                    --databank_1.clear()
                    showMarker = true
                    databank_1.setStringValue(1, "")
                    databank_1.setFloatValue(2, 0)
                    databank_1.setStringValue(3, "")
                    databank_1.setFloatValue(4, 0)
                    pos1 = 0
                    pos2 = 0
                    lasttime = 0
                    pos1time = 0
                    pos2time = 0
                    meterMarker = 0
                    meterMarker1 = 0
                    SU = 10

                    --system.showScreen(0)
                    unit.stopTimer("vectorhud")
                    vectorHUD = ''
                    Pos1 = 0
                    Pos2 = 0
                    privMySignAngleR = 0
                    privMySignAngleUp = 0
                    privTargetSignAngleR = 0
                    privTargetSignAngleUp = 0
                    targetVector = vec3.new(0, 0, 0)
                    targetTracker = false
                    myAngleR = 0
                    myAngleUp = 0
                    targetAngleR = 0
                    targetAngleUp = 0

                    system.print("---------------")
                    system.print("Coordinates have been deleted, set new coordinates")
                end

                if GHUD_export_mode == true and string.find(text, "/") and not string.find(text, "/::pos") then
                    unit.stopTimer("marker")
                    --databank_1.clear()
                    showMarker = true
                    databank_1.setStringValue(1, "")
                    databank_1.setFloatValue(2, 0)
                    databank_1.setStringValue(3, "")
                    databank_1.setFloatValue(4, 0)
                    pos1 = 0
                    pos2 = 0
                    lasttime = 0
                    pos1time = 0
                    pos2time = 0
                    meterMarker = 0
                    meterMarker1 = 0
                    SU = 10

                    --system.showScreen(0)
                    unit.stopTimer("vectorhud")
                    vectorHUD = ''
                    Pos1 = 0
                    Pos2 = 0
                    privMySignAngleR = 0
                    privMySignAngleUp = 0
                    privTargetSignAngleR = 0
                    privTargetSignAngleUp = 0
                    targetVector = vec3.new(0, 0, 0)
                    targetTracker = false
                    myAngleR = 0
                    myAngleUp = 0
                    targetAngleR = 0
                    targetAngleUp = 0

                    local start = 0
                    local fin = string.find(text, "/", start) - 1
                    pos1 = string.sub(text, start, fin)
                    system.print(pos1)

                    start = fin + 2
                    fin = string.find(text, "/", start) - 1
                    pos1time = tonumber(string.sub(text, start, fin))
                    system.print(pos1time)

                    start = fin + 2
                    fin = string.find(text, "/", start) - 1
                    pos2 = string.sub(text, start, fin)
                    system.print(pos2)

                    start = fin + 2
                    fin = string.find(text, "/", start)
                    pos2time = tonumber(string.sub(text, start, fin))
                    system.print(pos2time)

                    system.print("---------------")
                    --system.print(pos1.."/"..pos2.."/"..oldTime)
                    system.print("The coordinates have been loaded successfully!")
                    databank_1.setStringValue(1, pos1)
                    databank_1.setFloatValue(2, pos1time)
                    databank_1.setStringValue(3, pos2)
                    databank_1.setFloatValue(4, pos2time)

                    pos11 = zeroConvertToWorldCoordinates(pos1, system)

                    pos22 = zeroConvertToWorldCoordinates(pos2, system)

                    Pos1 = pos1
                    Pos2 = pos2

                    targetVector =
                    makeVector(zeroConvertToWorldCoordinates(Pos1, system), zeroConvertToWorldCoordinates(Pos2, system))
                    targetTracker = true

                    oldTime = tonumber(string.sub(text, start, fin))
                    curTime = system.getUtcTime()

                    --local dt1 = math.floor(UTC() - pos1time)
                    --local dt2 = math.floor(UTC() - pos2time)
                    local lasttime = math.floor(curTime - pos2time)
                    local dist1 = pos11:dist(pos22)
                    local timeroute = pos2time - pos1time
                    tspeed = dist1 / timeroute
                    tspeed1 = math.floor((dist1 / timeroute) * 3.6)
                    meterMarker1 = (lasttime * tspeed) + tspeed * 4

                    --length = SU*200000
                    length1 = meterMarker1
                    --lengthSU1=math.floor((length1/200000) * 100)/100
                    lengthSU1 = string.format("%0.2f", ((length1 / 200000) * 100) / 100)

                    meterMarker = (lasttime * calcTargetSpeed) + calcTargetSpeed * 4

                    --length = SU*200000
                    length = meterMarker
                    --lengthSU=math.floor((length/200000) * 100)/100
                    lengthSU = string.format("%0.2f", ((length / 200000) * 100) / 100)

                    resultVector1 = vectorLengthen(pos11, pos22, length1)
                    Waypoint1 = getPos4Vector(resultVector1)

                    system.setWaypoint(Waypoint1)

                    system.print("The target flew " .. lengthSU1 .. " su, speed " .. tspeed1 .. " km/h")

                    system.setWaypoint(Waypoint1)
                    unit.setTimer("marker", 1)
                    --system.showScreen(1)
                    unit.setTimer("vectorhud", 0.02)
                end
                if GHUD_export_mode == true and string.find(text, "/::pos") then
                    unit.stopTimer("marker")
                    --databank_1.clear()
                    showMarker = true
                    databank_1.setStringValue(1, "")
                    databank_1.setFloatValue(2, 0)
                    databank_1.setStringValue(3, "")
                    databank_1.setFloatValue(4, 0)
                    pos1 = 0
                    pos2 = 0
                    lasttime = 0
                    pos1time = 0
                    pos2time = 0
                    meterMarker = 0
                    meterMarker1 = 0
                    SU = 10

                    --system.showScreen(0)
                    unit.stopTimer("vectorhud")
                    vectorHUD = ''
                    Pos1 = 0
                    Pos2 = 0
                    privMySignAngleR = 0
                    privMySignAngleUp = 0
                    privTargetSignAngleR = 0
                    privTargetSignAngleUp = 0
                    targetVector = vec3.new(0, 0, 0)
                    targetTracker = false
                    myAngleR = 0
                    myAngleUp = 0
                    targetAngleR = 0
                    targetAngleUp = 0

                    local start = 0
                    local fin = string.find(text, "/", start) - 1
                    pos1 = string.sub(text, start, fin)
                    system.print(pos1)

                    start = fin + 2
                    fin = string.find(text, "/", start) - 1
                    pos1time = tonumber(string.sub(text, start, fin))
                    system.print(pos1time)

                    start = fin + 2
                    fin = string.find(text, "/", start) - 1
                    pos2 = string.sub(text, start, fin)
                    system.print(pos2)

                    start = fin + 2
                    fin = string.find(text, "/", start)
                    pos2time = tonumber(string.sub(text, start, fin))
                    system.print(pos2time)

                    system.print("---------------")
                    --system.print(pos1.."/"..pos2.."/"..oldTime)
                    system.print("The coordinates have been loaded successfully!")
                    databank_1.setStringValue(1, pos1)
                    databank_1.setFloatValue(2, pos1time)
                    databank_1.setStringValue(3, pos2)
                    databank_1.setFloatValue(4, pos2time)

                    pos11 = zeroConvertToWorldCoordinates(pos1, system)

                    pos22 = zeroConvertToWorldCoordinates(pos2, system)

                    Pos1 = pos1
                    Pos2 = pos2

                    targetVector =
                    makeVector(zeroConvertToWorldCoordinates(Pos1, system), zeroConvertToWorldCoordinates(Pos2, system))
                    targetTracker = true

                    oldTime = tonumber(string.sub(text, start, fin))
                    curTime = system.getUtcTime()

                    --local dt1 = math.floor(UTC() - pos1time)
                    --local dt2 = math.floor(UTC() - pos2time)
                    local lasttime = math.floor(curTime - pos2time)
                    local dist1 = pos11:dist(pos22)
                    local timeroute = pos2time - pos1time
                    tspeed = dist1 / timeroute
                    tspeed1 = math.floor((dist1 / timeroute) * 3.6)
                    meterMarker1 = (lasttime * tspeed) + tspeed * 4

                    --length = SU*200000
                    length1 = meterMarker1
                    --lengthSU1=math.floor((length1/200000) * 100)/100
                    lengthSU1 = string.format("%0.2f", ((length1 / 200000) * 100) / 100)

                    meterMarker = (lasttime * calcTargetSpeed) + calcTargetSpeed * 4

                    --length = SU*200000
                    length = meterMarker
                    --lengthSU=math.floor((length/200000) * 100)/100
                    lengthSU = string.format("%0.2f", ((length / 200000) * 100) / 100)

                    resultVector1 = vectorLengthen(pos11, pos22, length1)
                    Waypoint1 = getPos4Vector(resultVector1)

                    system.setWaypoint(Waypoint1)

                    system.print("The target flew " .. lengthSU1 .. " su, speed " .. tspeed1 .. " km/h")

                    system.setWaypoint(Waypoint1)
                    unit.setTimer("marker", 1)
                    --system.showScreen(1)
                    unit.setTimer("vectorhud", 0.02)
                end
                if string.find(text, "mar") then
                    if showMarker == true then
                        showMarker = false
                        system.print("Current target position - OFF")
                    end
                    local mar = tonumber((text):sub(4))
                    if databank_1.getStringValue(1) ~= "" and databank_1.getStringValue(3) ~= "" then
                        local length2 = mar * 200000

                        local pos123 = databank_1.getStringValue(1)
                        local pos234 = databank_1.getStringValue(3)

                        pos111 = zeroConvertToWorldCoordinates(pos123, system)
                        pos222 = zeroConvertToWorldCoordinates(pos234, system)

                        local resultVector2 = vectorLengthen(pos111, pos222, length2)
                        local Waypoint3 = getPos4Vector(resultVector2)

                        system.print(Waypoint3 .. " waypoint " .. mar .. " su")
                    end
                end
                end

                function tickVector(unit, system, text)
                if targetTracker == true and targetVector.x ~= 0 and targetVector.y ~= 0 and targetVector.z ~= 0 then
                    local pipeDist = getPipeD(system)
                    local worldOrintUp = vec3(construct.getWorldOrientationUp()):normalize()
                    local worldOrintRight = vec3(construct.getWorldOrientationRight()):normalize()
                    local worldOrintForw = vec3(construct.getWorldOrientationForward()):normalize()
                    local mySpeedVectorNorm = vec3(construct.getWorldVelocity()):normalize()
                    local projectedWorldUp = mySpeedVectorNorm:project_on_plane(worldOrintUp)
                    local projectedWorldR = mySpeedVectorNorm:project_on_plane(worldOrintRight)
                    local projectedWorldF = mySpeedVectorNorm:project_on_plane(worldOrintForw)

                    local myRotateDirR = projectedWorldF:cross(worldOrintUp):normalize()
                    myAngleR = projectedWorldUp:angle_between(worldOrintForw)
                    local mySignAngleR = utils.sign(myRotateDirR:angle_between(worldOrintForw) - math.pi / 2)
                    if mySignAngleR ~= 0 then
                        myAngleR = myAngleR * mySignAngleR
                        privMySignAngleR = mySignAngleR
                    else
                        myAngleR = myAngleR * privMySignAngleR
                    end

                    local myRotateDirUp = projectedWorldR:cross(worldOrintUp):normalize()
                    myAngleUp = projectedWorldR:angle_between(-worldOrintUp) - math.pi / 2
                    local mySignAngleUp = utils.sign(myRotateDirUp:angle_between(worldOrintRight) - math.pi / 2)
                    if mySignAngleUp ~= 0 then
                        myAngleUp = myAngleUp * mySignAngleUp
                        privMySignAngleUp = mySignAngleUp
                    else
                        myAngleUp = myAngleUp * privMySignAngleUp
                    end
                    local targetVectorNorm = targetVector:normalize()

                    local targetProjectedWorldUp = targetVectorNorm:project_on_plane(worldOrintUp)
                    local targetProjectedWorldR = targetVectorNorm:project_on_plane(worldOrintRight)
                    local targetProjectedWorldF = targetVectorNorm:project_on_plane(worldOrintForw)
                    local targetRotateDirR = targetProjectedWorldF:cross(worldOrintUp):normalize()
                    targetAngleR = targetProjectedWorldUp:angle_between(worldOrintForw)
                    local targetSignAngleR = utils.sign(targetRotateDirR:angle_between(worldOrintForw) - math.pi / 2)

                    if targetSignAngleR ~= 0 then
                        targetAngleR = targetAngleR * targetSignAngleR
                        privTargetSignAngleR = targetSignAngleR
                    else
                        targetAngleR = targetAngleR * privTargetSignAngleR
                    end
                    local targetRotateDirUp = targetProjectedWorldR:cross(worldOrintUp):normalize()
                    targetAngleUp = targetProjectedWorldR:angle_between(-worldOrintUp) - math.pi / 2
                    local targetSignAngleUp = utils.sign(targetRotateDirUp:angle_between(worldOrintRight) - math.pi / 2)
                    if targetSignAngleUp ~= 0 then
                        targetAngleUp = targetAngleUp * targetSignAngleUp
                        privTargetSignAngleUp = targetSignAngleUp
                    else
                        targetAngleUp = targetAngleUp * privTargetSignAngleUp
                    end
                    --system.print(targetAngleR*rad2deg.. [[ | ]].. targetAngleUp*rad2deg)
                    targetVectorWidget =
                    [[

                    <div class='circle' style='position:absolute;top:50%;left:4%;'>
                    <div style='transform: translate(0px, -26px);color:#ffb750;'>]] ..
                    string.format("%0.1f", myAngleR * rad2deg) ..
                    [[°</div>
                    <div style='transform: translate(70px, -45px);color:#f54425;'>]] ..
                    string.format("%0.1f", targetAngleR * rad2deg) ..
                    [[°</div>
                    <div style='transform: translate(20px, 80px);color:#f54425;'>Δ ]] ..
                    string.format("%0.1f", myAngleR * rad2deg - targetAngleR * rad2deg) ..
                    [[°</div>
                    </div>
                    <div class='vectorLine' style='top:54.65%;left:4%;background:#ffb750;z-index:30;transform:rotate(]] ..
                    myAngleR * rad2deg + 90 ..
                    [[deg)'></div>


                    <div class='circle' style='position:absolute;top:50%;left:12%;'>
                    <div style='transform: translate(0px, -26px);color:#ffb750;'>]] ..
                    string.format("%0.1f", myAngleUp * rad2deg) ..
                    [[°</div>
                    <div style='transform: translate(70px, -45px);color:#f54425;'>]] ..
                    string.format("%0.1f", targetAngleUp * rad2deg) ..
                    [[°</div>
                    <div style='transform: translate(20px, 80px);color:#f54425;'>Δ ]] ..
                    string.format(
                    "%0.1f",
                    myAngleUp * rad2deg - targetAngleUp * rad2deg
                    ) ..
                    [[°</div>
                    </div>
                    <div class='vectorLine' style='top:54.65%;left:12%;background:#ffb750;z-index:30;transform:rotate(]] ..
                    myAngleUp * rad2deg + 180 ..
                    [[deg)'></div>


                    <div class='vectorLine' style='top:54.65%;left:4%;background:#f54425;z-index:29;transform:rotate(]] ..
                    targetAngleR * rad2deg + 90 ..
                    [[deg)'></div>
                    <div class='vectorLine' style='top:54.65%;left:12%;background:#f54425;z-index:29;transform:rotate(]] ..
                    targetAngleUp * rad2deg + 180 ..
                    [[deg)'></div>
                    ]]

                    local html1 =
                    [[
                    <style>
                    .main4 {
                        position: absolute;
                        width: auto;
                        padding: 5px;
                        top: 98%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        text-align: center;
                        background-color: #142027;
                        color: white;
                        font-family: verdana;
                        font-size: 1em;
                        border-radius: 2vh;
                        border: 4px solid #FFB12C;
                        </style>
                        <div class="main4">]] ..
                        pipeDist .. [[</div>]]

                        style =
                        [[
                        <style>
                        .circle {
                            height: 100px;
                            width: 100px;
                            background-color: #555;
                            border-radius: 50%;
                            opacity: 0.5;
                            border: 4px solid white;
                        }     .vectorLine{position:absolute;transform-origin: 100% 0%;width: 50px;height:0.15em;}</style>]]
                        if (system.getUtcTime() - pos2time) > 4 then pp1 = '' end
                        vectorHUD = style .. targetVectorWidget .. html1
                    end
                end

                function tickMarker(unit, system, text)
                    if databank_1.getStringValue(1) ~= "" or databank_1.getStringValue(3) ~= "" and databank_1.getFloatValue(2) == 0 or databank_1.getFloatValue(4) == 0 then

                        pos11 = zeroConvertToWorldCoordinates(pos1, system)
                        pos22 = zeroConvertToWorldCoordinates(pos2, system)

                        meterMarker1 = meterMarker1 + tspeed
                        length1 = meterMarker1
                        --lengthSU1=math.floor((length1/200000) * 100)/100
                        lengthSU1 = string.format("%0.2f", ((length1 / 200000) * 100) / 100)
                        resultVector1 = vectorLengthen(pos11, pos22, length1)
                        Waypoint1 = getPos4Vector(resultVector1)

                        meterMarker = meterMarker + calcTargetSpeed
                        length = meterMarker
                        --lengthSU=math.floor((length/200000) * 100)/100
                        lengthSU = string.format("%0.2f", ((length / 200000) * 100) / 100)
                        resultVector = vectorLengthen(pos11, pos22, length)
                        Waypoint = getPos4Vector(resultVector)

                        if showMarker == true then
                            if mmode == true then
                            system.setWaypoint(Waypoint1)
                            system.print("The target flew " .. lengthSU1 .. " su, speed " .. tspeed1 .. " km/h")
                            else
                            system.setWaypoint(Waypoint)
                            system.print("The target flew " .. lengthSU .. " su, speed " .. targetSpeed .. " km/h")
                            end
                        end
                    end
                end

                function altUP(unit, system, text)
                    --if lalt == true then
                    if databank_1.getStringValue(1) ~= "" and databank_1.getStringValue(3) ~= "" then
                        showMarker = false
                        SU = SU + 2.5
                        length = SU * 200000

                        pos11 = zeroConvertToWorldCoordinates(pos1, system)
                        pos22 = zeroConvertToWorldCoordinates(pos2, system)

                        resultVector = vectorLengthen(pos11, pos22, length)
                        Waypoint = getPos4Vector(resultVector)

                        system.setWaypoint(Waypoint)

                        system.print(Waypoint .. " waypoint " .. SU .. " su")
                    end
                    --end
                end

                function altDOWN(unit, system, text)
                    --if lalt == true then
                    if databank_1.getStringValue(1) ~= "" and databank_1.getStringValue(3) ~= "" then
                        showMarker = false
                        SU = SU - 2.5
                        length = SU * 200000

                        pos11 = zeroConvertToWorldCoordinates(pos1, system)
                        pos22 = zeroConvertToWorldCoordinates(pos2, system)

                        resultVector = vectorLengthen(pos11, pos22, length)
                        Waypoint = getPos4Vector(resultVector)

                        system.setWaypoint(Waypoint)

                        system.print(Waypoint .. " waypoint " .. SU .. " su")
                    end
                    --end
                end

                function altRIGHT(unit, system, text)
                    --if lalt == true then
                    if databank_1.getStringValue(1) ~= "" and databank_1.getStringValue(3) ~= "" then
                        showMarker = false
                        SU = SU + 10
                        length = SU * 200000

                        pos11 = zeroConvertToWorldCoordinates(pos1, system)
                        pos22 = zeroConvertToWorldCoordinates(pos2, system)

                        resultVector = vectorLengthen(pos11, pos22, length)
                        Waypoint = getPos4Vector(resultVector)

                        system.setWaypoint(Waypoint)

                        system.print(Waypoint .. " waypoint " .. SU .. " su")
                    end
                    --end
                end

                function altLEFT(unit, system, text)
                    --if lalt == true then
                    if databank_1.getStringValue(1) ~= "" and databank_1.getStringValue(3) ~= "" then
                        showMarker = false
                        SU = SU - 10
                        length = SU * 200000

                        pos11 = zeroConvertToWorldCoordinates(pos1, system)
                        pos22 = zeroConvertToWorldCoordinates(pos2, system)

                        resultVector = vectorLengthen(pos11, pos22, length)
                        Waypoint = getPos4Vector(resultVector)

                        system.setWaypoint(Waypoint)

                        system.print(Waypoint .. " waypoint " .. SU .. " su")
                    end
                    --end
                end

                function GEAR(unit, system, text)
                    posExport1 = databank_1.getStringValue(1)
                    posExport2 = databank_1.getStringValue(3)
                    --timeExport1 = tonumber(string.format('%0.0f',databank_1.getFloatValue(2)))
                    --timeExport2 = tonumber(string.format('%0.0f',databank_1.getFloatValue(2)))
                    timeExport1 = math.floor(databank_1.getFloatValue(2))
                    timeExport2 = math.floor(databank_1.getFloatValue(4))

                    system.print("The coordinates were exported to screen")

                    screen_1.setCenteredText(posExport1 .. "/" .. timeExport1 .. "/" .. posExport2 .. "/" .. timeExport2)
                end
                function radarPos(system,radar)
                    local id = activeRadar.getTargetId()
                    if id ~= 0 then
                        local dist = activeRadar.getConstructDistance(id)
                        local forwvector = vec3(system.getCameraWorldForward())
                        local worldpos = vec3(system.getCameraWorldPos())
                        local p = (dist * forwvector + worldpos)

                        if pos1 ~= 0 and pos2 == 0 then

                            pos2 = '::pos{0,0,'..p.x..','..p.y..','..p.z..'}'
                            databank_1.setStringValue(3, pos2)
                            pos2time = math.floor(system.getUtcTime())
                            databank_1.setFloatValue(4, pos2time)
                            system.print(pos2 .." pos2 saved")

                            pos11 = zeroConvertToWorldCoordinates(pos1, system)

                            pos22 = zeroConvertToWorldCoordinates(pos2, system)

                            local dist1 = pos11:dist(pos22)
                            local timeroute = pos2time - pos1time
                            tspeed = dist1 / timeroute
                            tspeed1 = math.floor((dist1 / timeroute) * 3.6)
                            Pos1 = pos1
                            Pos2 = pos2

                            targetVector =
                            makeVector(zeroConvertToWorldCoordinates(Pos1, system), zeroConvertToWorldCoordinates(Pos2, system))
                            targetTracker = true

                            meterMarker1 = meterMarker1 + tspeed * 4
                            length1 = meterMarker1

                            resultVector1 = vectorLengthen(pos11, pos22, 6000000)
                            Waypoint1 = getPos4Vector(resultVector1)

                            system.setWaypoint(Waypoint1)
                            meterMarker = meterMarker + calcTargetSpeed * 4
                            length = meterMarker

                            resultVector = vectorLengthen(pos11, pos22, length)
                            Waypoint = getPos4Vector(resultVector)

                            system.print("---------------")
                            system.print("The coordinates are set manually!")
                            posExport1 = databank_1.getStringValue(1)
                            posExport2 = databank_1.getStringValue(3)
                            timeExport1 = math.floor(databank_1.getFloatValue(2))
                            timeExport2 = math.floor(databank_1.getFloatValue(4))

                            system.print("The coordinates were exported to screen")

                            screen_1.setCenteredText(posExport1 .. "/" .. timeExport1 .. "/" .. posExport2 .. "/" .. timeExport2)
                            system.print("Target speed: " .. tspeed1 .. " km/h")
                            pp1 = tspeed1..' km/h'
                            --unit.setTimer("marker", 1)
                            --system.showScreen(1)
                            unit.setTimer("vectorhud", 0.02)
                        else
                            if pos1 == 0 then
                            pos1 = '::pos{0,0,'..p.x..','..p.y..','..p.z..'}'
                            pp1 = 'pos1 saved'
                            databank_1.setStringValue(1, pos1)
                            pos1time = math.floor(system.getUtcTime())
                            databank_1.setFloatValue(2, pos1time)
                            system.print(pos1 .. " pos1 saved")
                            else
                            if pos1 ~= 0 and pos2 ~= 0 then
                                unit.stopTimer("marker")
                                --databank_1.clear()
                                showMarker = true
                                databank_1.setStringValue(1, "")
                                databank_1.setFloatValue(2, 0)
                                databank_1.setStringValue(3, "")
                                databank_1.setFloatValue(4, 0)
                                pos1 = 0
                                pos2 = 0
                                lasttime = 0
                                pos1time = 0
                                pos2time = 0
                                meterMarker = 0
                                meterMarker1 = 0
                                SU = 10

                                --system.showScreen(0)
                                unit.stopTimer("vectorhud")
                                vectorHUD = ''
                                Pos1 = 0
                                Pos2 = 0
                                privMySignAngleR = 0
                                privMySignAngleUp = 0
                                privTargetSignAngleR = 0
                                privTargetSignAngleUp = 0
                                targetVector = vec3.new(0, 0, 0)
                                targetTracker = false
                                myAngleR = 0
                                myAngleUp = 0
                                targetAngleR = 0
                                targetAngleUp = 0

                                system.print("---------------")
                                unit.stopTimer("vectorhud")
                                pos1 = '::pos{0,0,'..p.x..','..p.y..','..p.z..'}'
                                pp1 = 'pos1 saved'
                                databank_1.setStringValue(1, pos1)
                                pos1time = math.floor(system.getUtcTime())
                                databank_1.setFloatValue(2, pos1time)
                                system.print(pos1 .. " pos1 saved")
                            end
                            end
                        end
                    end
                end

                start(unit,system,text)

                local opt1=system.getActionKeyName('option1')
                local opt2=system.getActionKeyName('option2')
                local opt3=system.getActionKeyName('option3')
                local opt4=system.getActionKeyName('option4')
                local opt5=system.getActionKeyName('option5')
                local opt6=system.getActionKeyName('option6')
                local opt7=system.getActionKeyName('option7')
                local opt8=system.getActionKeyName('option8')
                local opt9=system.getActionKeyName('option9')
                local shifttext=system.getActionKeyName('lshift')
                local geartext=system.getActionKeyName('gear')
                local alttext=system.getActionKeyName('lalt')
                local forwardtext=system.getActionKeyName('forward')
                local backwardtext=system.getActionKeyName('backward')
                local uptext=system.getActionKeyName('up')
                local downtext=system.getActionKeyName('down')
                local lefttext=system.getActionKeyName('left')
                local antigravtext = system.getActionKeyName('antigravity')
                local righttext=system.getActionKeyName('right')
                local yawlefttext=system.getActionKeyName('yawleft')
                local yawrighttext=system.getActionKeyName('yawright')
                local braketext1=system.getActionKeyName('brake')
                local lighttext=system.getActionKeyName('light')
                local boostertext=system.getActionKeyName('booster')

                helpHTML = [[
                    <html>
                <style>
                    html,
                    body {
                    background-image: linear-gradient(to right bottom, #1a0a13, #1e0f1a, #201223, #21162c, #1e1b36, #322448, #4a2b58, #653265, #a43b65, #d35551, #e78431, #dabb10);
                    }
                    .helperCenter {
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    color: white;
                    font-family: "Roboto Slab", serif;
                    font-size: 1.5em;
                    text-align: center;
                    transform: translate(-50%, -50%);
                    }
                    ibold {
                    font-weight: bold;
                    }
                    .topL {
                    position: absolute;
                    top: 1vh;
                    left: 1vw;
                    display: flex;
                    }
                    .bottomL {
                    position: absolute;
                    bottom: 1vh;
                    left: 1vw;
                    display: flex;
                    }
                    .helper1 {
                    color: white;
                    font-family: "Roboto Slab", serif;
                    font-size: 1em;
                    }
                    .helper2 {
                    margin-left: 2vw;
                    color: white;
                    font-family: "Roboto Slab", serif;
                    font-size: 1em;
                    }
                    .helper3 {
                    color: white;
                    font-family: "Roboto Slab", serif;
                    font-size: 1em;
                    }
                    .helper4 {
                    margin-left: 2vw;
                    color: white;
                    font-family: "Roboto Slab", serif;
                    font-size: 1em;
                    }
                    .hudversion {
                    position: absolute;
                    bottom: 0.15vh;
                    color: white;
                    right: 5.25vw;
                    font-family: verdana;
                    letter-spacing: 0.5px;
                    font-size: 1.2em;
                }
                    bdr {
                    color: white;
                    background-color: green;
                    padding-right: 4px;
                    padding-left: 4px;
                    padding-top: 2px;
                    padding-bottom: 2px;
                    border-radius: 6px;
                    border: 2.5px solid white;
                    }
                    luac {
                    color: white;
                    background-color: green;
                    padding-right: 4px;
                    padding-left: 4px;
                    padding-top: 2px;
                    padding-bottom: 2px;
                    border: 2.5px solid white;
                    }
                </style>
                <body>
                    <div class="topL">
                    <div class="helper1">
                        <ibold>RADAR WIDGET:</ibold>
                        <br>
                        <br>
                        <bdr>]]..alttext..[[</bdr> + <bdr>]]..downtext..[[</bdr> : switch between friends/enemies<br>
                        <br>
                        <bdr>]]..alttext..[[</bdr> + <bdr>]]..uptext..[[</bdr> : construct size filter<br>
                        <br>
                        <bdr>]]..shifttext..[[</bdr> + <bdr>]]..opt1..[[</bdr> : add/remove selected target from whitelist<br>
                    </div>
                    <div class="helper2">
                        <ibold>TARGET VECTOR:</ibold>
                        <br>
                        <br>
                        <bdr>]]..geartext..[[</bdr> : set pos1/pos2 for radar selected target<br>
                        <br>
                        <bdr>]]..shifttext..[[</bdr> + <bdr>↓↑</bdr> : set pos1/pos2 for radar selected target<br>
                        <br>
                        <bdr>]]..shifttext..[[</bdr> + <bdr>←→</bdr> : move destination ±10 su<br>
                        <br>
                        <bdr>]]..shifttext..[[</bdr> + <bdr>]]..alttext..[[</bdr> : destination to closest target pipe<br>
                        <br>
                        <bdr>]]..alttext..[[</bdr> + <bdr>]]..geartext..[[</bdr> : on/off export mode<br>
                        <br>
                        <bdr>]]..boostertext..[[</bdr> : show/hide current target position (works only when manually setting coordinates or in export mode)<br>
                        <br>
                        <bdr>]]..geartext..[[</bdr> + <bdr>]]..opt4..[[</bdr> : switch target position between current speed or targetSpeed from LUA parameters<br>
                    </div>
                    </div>
                    <div class="bottomL">
                    <div class="helper3">
                        <ibold>RADAR WIDGET LUA COMMANDS:</ibold>
                        <br>
                        <br>
                        <luac>f345</luac> : focus mode where 345 is target ID<br>
                        <br>
                        <luac>f</luac> : reset focus mode<br>
                        <br>
                        <luac>addall</luac> : add all radar targets to whitelist databank<br>
                        <br>
                        <luac>clear</luac> : clear all whitelist databank<br>
                        <br>
                        <luac>friends</luac> : show/hide AR allies marks<br>
                        <br>
                        <luac>safe</luac> : on/off radar notifications in safe zone<br>
                    </div>
                    <div class="helper4">
                        <ibold>TARGET VECTOR LUA COMMANDS:</ibold>
                        <br>
                        <br>
                        <luac>n</luac> : reset pos1/pos2<br>
                        <br>
                        <luac>mar345</luac> : get position in LUA chat, where 345 is SU ahead of the target<br>
                        <br>
                        <luac>export</luac> : export coordinates to screen in format - pos1/time1/pos2/time2<br>
                    </div>
                    </div>
                    <div class="helperCenter">GEMINI FOUNDATION<br><br>Gunner Module Controls</div>
                    <div class="hudversion">GHUD v]]..HUD_version..[[</div>
                </body>
                </html>]]

                system.print('GHUD Gunner module v'..HUD_version)
                system.print(''..geartext..' + ←: helper')

                system.showScreen(1)
                main1 = coroutine.create(main)
                unit.setTimer("hud", 0.016)
                unit.setTimer("logger", 0.5)

                if collectgarbages == true then
                    unit.setTimer("cleaner",30)
                end
        onStop:
            lua: |
                screen_1.deactivate()
        onTimer:
            args: ['hud']
            lua: |
                radarIDs = activeRadar.getConstructIds()
                idN = #radarIDs

                mRadar:onUpdate()

                if coroutine.status(main1) ~= "dead" and coroutine.status(main1) == "suspended" then
                coroutine.resume(main1)
                --coroutine.xpcall(main1) -- resume debug coroutine
                end

                local dx = system.getMouseDeltaX()
                local dy = system.getMouseDeltaY()

                local sight = ''
                if weapon_1 ~= nil then
                local wdata = weapon_1.getWidgetData()
                --weapon_1.getHitProbability() for future version
                --zone = data:match('"outOfZone":(.-),') deprecated, bad perfomance
                probil = tonumber(wdata:match('"hitProbability":(.-),'))
                end

                local shipPos = vec3(construct.getWorldPosition())
                local id = activeRadar.getTargetId()
                if id ~= 0 then
                local sdist = ""
                local dist = math.floor(activeRadar.getConstructDistance(id))
                local name = activeRadar.getConstructName(id)
                local size = activeRadar.getConstructCoreSize(id)
                local speed = 'UNKNOWN'
                local anchor = 'middle'
                local damage = '0.0'
                if totalDamage[id] ~= nil then --target damage calculation concept
                    damage = string.format('%0.1f',totalDamage[id].damage * 0.000001)
                end
                if activeRadar.isConstructIdentified(id) == 1 then
                    speed = activeRadar.getConstructSpeed(id)
                    speed = math.floor(speed * 3.6)
                    dist3 = speed
                    anchor = 'start'
                end
                local pos1 = shipPos + dist * vec3(construct.getWorldOrientationForward())
                local point1 = library.getPointOnScreen({pos1.x,pos1.y,pos1.z})
                if dist >= 100000 then
                    dist = string.format('%0.2f', dist/200000)
                    sdist = 'SU'
                elseif dist >= 1000 and dist < 100000 then
                    dist = string.format('%0.1f', dist/1000)
                    sdist = 'KM'
                else
                    dist = string.format('%0.0f', dist)
                    sdist = 'M'
                end
                local sight1 = [[
                .sight1 {
                    position: absolute;
                    opacity: 0;
                    left: 0;
                    top: 0;
                }
                ]]
                if point1[3] > 0 then --visible zone
                    local x2 = (screenWidth*point1[1]) - dx - GHUD_AR_sight_size/2
                    local y2 = (screenHeight*point1[2]) - dy - GHUD_AR_sight_size/2
                    sight1 = [[
                    .sight1 {
                        position: absolute;
                        width: ]]..GHUD_AR_sight_size..[[px;
                        height: ]]..GHUD_AR_sight_size..[[px;
                        left: ]]..x2..[[px;
                        top: ]]..y2..[[px;
                    }]]
                end
                sight = [[
                <style>
                ]]..sight1..[[
                .sight2 {
                    position: absolute;
                    width: 400px;
                    height: 400px;
                    left: 50%;
                    top: 50%;
                    transform: translate(-50%, -50%);
                }
                </style>
                <div class="sight1">
                <?xml version="1.0" encoding="utf-8"?>
                <svg viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xmlns="http://www.w3.org/2000/svg">
                <path style="fill: ]]..GHUD_AR_sight_color..[[;" d="M 231.231 440.732 C 230.524 444.711 227.058 447.508 223.154 447.508 C 222.675 447.508 222.191 447.465 221.705 447.379 C 141.949 433.179 78.822 370.052 64.621 290.296 C 63.825 285.83 66.802 281.564 71.268 280.769 C 75.729 279.975 80 282.95 80.794 287.416 C 93.793 360.422 151.578 418.207 224.583 431.205 C 229.051 432.001 232.026 436.266 231.231 440.732 Z M 71.268 231.231 C 71.754 231.318 72.239 231.36 72.717 231.36 C 76.621 231.36 80.087 228.563 80.794 224.584 C 93.793 151.578 151.578 93.793 224.583 80.795 C 229.049 80 232.026 75.734 231.23 71.269 C 230.435 66.802 226.166 63.829 221.704 64.622 C 141.948 78.822 78.821 141.949 64.62 221.705 C 63.825 226.171 66.802 230.436 71.268 231.231 Z M 440.732 280.769 C 436.273 279.976 432.001 282.951 431.206 287.416 C 418.207 360.422 360.422 418.208 287.417 431.206 C 282.951 432.001 279.974 436.267 280.77 440.733 C 281.477 444.712 284.942 447.509 288.847 447.509 C 289.326 447.509 289.81 447.466 290.296 447.38 C 370.052 433.18 433.179 370.052 447.38 290.296 C 448.175 285.83 445.198 281.564 440.732 280.769 Z M 387.492 112.892 L 399.109 124.508 C 423.609 151.152 440.78 184.629 447.38 221.703 C 448.176 226.169 445.199 230.435 440.733 231.23 C 436.27 232.026 432.001 229.049 431.207 224.583 C 425.206 190.887 409.664 160.43 387.49 136.126 L 375.873 124.51 C 351.57 102.336 321.113 86.793 287.417 80.793 C 282.951 79.998 279.974 75.732 280.77 71.266 C 281.565 66.8 285.839 63.825 290.296 64.619 C 327.37 71.22 360.848 88.39 387.492 112.892 Z" transform="matrix(0.707107, 0.707107, -0.707107, 0.707107, 255.999945, -106.038815)"></path>
                </svg></div>
                <div class="sight2">
                <?xml version="1.0" encoding="utf-8"?>
                <svg viewBox="0 0 600 600" xmlns="http://www.w3.org/2000/svg">
                <defs>
                <linearGradient id="hit_gradient" x1="50%" y1="100%" x2="50%">
                <stop stop-color="#07e88e" stop-opacity="1" offset="]]..probil..[[" />
                <stop stop-color="rgb(255, 255, 255)" stop-opacity="0.25" offset="0" />
                </linearGradient>
                </defs>
                <path style="fill: url(#hit_gradient);" d="M 275.231 484.732 C 274.524 488.711 271.058 491.508 267.154 491.508 C 266.675 491.508 266.191 491.465 265.705 491.379 C 185.949 477.179 122.822 414.052 108.621 334.296 C 107.825 329.83 110.802 325.564 115.268 324.769 C 119.729 323.975 124 326.95 124.794 331.416 C 137.793 404.422 195.578 462.207 268.583 475.205 C 273.051 476.001 276.026 480.266 275.231 484.732 Z M 115.268 275.231 C 115.754 275.318 116.239 275.36 116.717 275.36 C 120.621 275.36 124.087 272.563 124.794 268.584 C 137.793 195.578 195.578 137.793 268.583 124.795 C 273.049 124 276.026 119.734 275.23 115.269 C 274.435 110.802 270.166 107.829 265.704 108.622 C 185.948 122.822 122.821 185.949 108.62 265.705 C 107.825 270.171 110.802 274.436 115.268 275.231 Z M 484.732 324.769 C 480.273 323.976 476.001 326.951 475.206 331.416 C 462.207 404.422 404.422 462.208 331.417 475.206 C 326.951 476.001 323.974 480.267 324.77 484.733 C 325.477 488.712 328.942 491.509 332.847 491.509 C 333.326 491.509 333.81 491.466 334.296 491.38 C 414.052 477.18 477.179 414.052 491.38 334.296 C 492.175 329.83 489.198 325.564 484.732 324.769 Z M 431.492 156.892 L 443.109 168.508 C 467.609 195.152 484.78 228.629 491.38 265.703 C 492.176 270.169 489.199 274.435 484.733 275.23 C 480.27 276.026 476.001 273.049 475.207 268.583 C 469.206 234.887 453.664 204.43 431.49 180.126 L 419.873 168.51 C 395.57 146.336 365.113 130.793 331.417 124.793 C 326.951 123.998 323.974 119.732 324.77 115.266 C 325.565 110.8 329.839 107.825 334.296 108.619 C 371.37 115.22 404.848 132.39 431.492 156.892 Z"/>
                <text style="fill: white; font-family: verdana; font-size: 26px; font-weight: 700; paint-order: stroke; stroke: rgb(0, 0, 0); stroke-width: 2px; text-anchor: middle;" transform="matrix(1, 0, 0, 1, 45.470986, 456.61146)"><tspan x="254.529" y="60.003">]]..damage..[[M</tspan></text>
                <text style="fill: rgb(0, 191, 255); font-family: verdana; font-size: 26px; font-style: italic; font-weight: 700; paint-order: stroke; stroke: rgb(0, 0, 0); stroke-width: 2px; text-anchor: middle;" transform="matrix(1, 0, 0, 1, 44.105107, 38.795308)"><tspan x="254.529" y="36.003">]]..name..[[</tspan></text>
                <text style="fill: rgb(0, 191, 255); font-family: verdana; font-size: 26px; font-style: italic; font-weight: 700; paint-order: stroke; stroke: rgb(0, 0, 0); stroke-width: 2px; text-anchor: start;" transform="matrix(1, 0, 0, 1, 241.470998, 244.195302)"><tspan x="254.529" y="36.003">KM/H</tspan></text>
                <text style="fill: rgb(0, 191, 255); font-family: verdana; font-size: 26px; font-style: italic; font-weight: 700; paint-order: stroke; stroke: rgb(0, 0, 0); stroke-width: 2px; text-anchor: end;" transform="matrix(1, 0, 0, 1, -154.09122, 244.195302)"><tspan x="254.529" y="36.003">]]..sdist..[[</tspan></text>
                <text style="fill: rgb(0, 191, 255); font-family: verdana; font-size: 26px; font-style: italic; font-weight: 700; paint-order: stroke; stroke: rgb(0, 0, 0); stroke-width: 2px; text-anchor: middle;" transform="matrix(1, 0, 0, 1, 43.882192, 510.395305)"><tspan x="254.529" y="36.003">DAMAGE</tspan></text>
                <text style="fill: white; font-family: verdana; font-size: 26px; font-weight: 700; paint-order: stroke; stroke: rgb(0, 0, 0); stroke-width: 2px; text-anchor: middle;" transform="matrix(1, 0, 0, 1, 45.470986, 44.611463)"><tspan x="254.529" y="60.003">]].. tostring(id):sub(-3) ..[[</tspan></text>
                <text style="fill: white; font-family: verdana; font-size: 26px; font-weight: 700; paint-order: stroke; stroke: rgb(0, 0, 0); stroke-width: 2px; text-anchor: end;" y="310.246" x="101.677">]]..dist..[[</text>
                <text style="fill: ]]..newcolor..[[; font-family: verdana; font-size: 26px; font-weight: 700; paint-order: stroke; stroke: rgb(0, 0, 0); stroke-width: 2px; text-anchor: ]]..anchor..[[;" y="310.246" x="494">]]..speed .. znak..[[</text>
                </svg></div>]]
                else
                local pos1 = shipPos + 400000 * vec3(construct.getWorldOrientationForward())
                local point1 = library.getPointOnScreen({pos1.x,pos1.y,pos1.z})
                --local pos1 = ConvertLocalToWorld(0,distance,0)
                --local point1 = library.getPointOnScreen({pos1.x,pos1.y,pos1.z})
                if point1[3] > 0 then --visible zone
                    local x2 = (screenWidth*point1[1]) - dx - GHUD_AR_sight_size/2
                    local y2 = (screenHeight*point1[2]) - dy - GHUD_AR_sight_size/2
                    sight = [[
                    <style>
                    .sight1 {
                        position: absolute;
                        width: ]]..GHUD_AR_sight_size..[[px;
                        height: ]]..GHUD_AR_sight_size..[[px;
                        left: ]]..x2..[[px;
                        top: ]]..y2..[[px;
                    }
                    </style>
                    <div class="sight1">
                    <?xml version="1.0" encoding="utf-8"?>
                    <svg viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xmlns="http://www.w3.org/2000/svg">
                    <path style="fill: ]]..GHUD_AR_sight_color..[[;" d="M 231.231 440.732 C 230.524 444.711 227.058 447.508 223.154 447.508 C 222.675 447.508 222.191 447.465 221.705 447.379 C 141.949 433.179 78.822 370.052 64.621 290.296 C 63.825 285.83 66.802 281.564 71.268 280.769 C 75.729 279.975 80 282.95 80.794 287.416 C 93.793 360.422 151.578 418.207 224.583 431.205 C 229.051 432.001 232.026 436.266 231.231 440.732 Z M 71.268 231.231 C 71.754 231.318 72.239 231.36 72.717 231.36 C 76.621 231.36 80.087 228.563 80.794 224.584 C 93.793 151.578 151.578 93.793 224.583 80.795 C 229.049 80 232.026 75.734 231.23 71.269 C 230.435 66.802 226.166 63.829 221.704 64.622 C 141.948 78.822 78.821 141.949 64.62 221.705 C 63.825 226.171 66.802 230.436 71.268 231.231 Z M 440.732 280.769 C 436.273 279.976 432.001 282.951 431.206 287.416 C 418.207 360.422 360.422 418.208 287.417 431.206 C 282.951 432.001 279.974 436.267 280.77 440.733 C 281.477 444.712 284.942 447.509 288.847 447.509 C 289.326 447.509 289.81 447.466 290.296 447.38 C 370.052 433.18 433.179 370.052 447.38 290.296 C 448.175 285.83 445.198 281.564 440.732 280.769 Z M 387.492 112.892 L 399.109 124.508 C 423.609 151.152 440.78 184.629 447.38 221.703 C 448.176 226.169 445.199 230.435 440.733 231.23 C 436.27 232.026 432.001 229.049 431.207 224.583 C 425.206 190.887 409.664 160.43 387.49 136.126 L 375.873 124.51 C 351.57 102.336 321.113 86.793 287.417 80.793 C 282.951 79.998 279.974 75.732 280.77 71.266 C 281.565 66.8 285.839 63.825 290.296 64.619 C 327.37 71.22 360.848 88.39 387.492 112.892 Z" transform="matrix(0.707107, 0.707107, -0.707107, 0.707107, 255.999945, -106.038815)"></path>
                    </svg></div>]]
                end
                end

                local AR_allies = ''
                if GHUD_show_AR_allies_marks == true then
                for k,v in pairs(radarIDs) do --AR marks
                if activeRadar.hasMatchingTransponder(v) == 1 then
                    local pos = activeRadar.getConstructWorldPos(v)
                    local fID = ''
                    if friendsData[v] ~= nil then
                        fID = friendsData[v].tag
                    end
                    local point = library.getPointOnScreen({pos[1],pos[2],pos[3]})
                    if point[3] > 0 then --visible zone
                        local x = (screenWidth*point[1]) - dx - GHUD_AR_allies_border_size/2
                        local y = (screenHeight*point[2]) - dy - GHUD_AR_allies_border_size/2
                        AR_allies = AR_allies .. [[
                        <style>     
                        .id]]..v..[[ {
                            position: absolute;
                            width: ]]..GHUD_AR_allies_border_size..[[px;
                            height: ]]..GHUD_AR_allies_border_size..[[px;
                            left: ]]..x..[[px;
                            top: ]]..y..[[px;
                        }
                        </style>
                        <div class="id]]..v..[["><?xml version="1.0" encoding="utf-8"?>
                        <svg viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
                        <rect x="235" y="235" width="30" height="30" style="fill: rgba(0,0,0,0); stroke: ]]..GHUD_AR_allies_border_color..[[; stroke-width: 2"/>
                        <text style="fill: ]]..GHUD_AR_allies_font_color..[[; font-family: Arial, sans-serif; font-size: 28px; font-weight: 700; text-anchor: middle;" transform="matrix(0.609174, 0, 0, 0.609176, 250.000005, 225)">]]..fID..[[</text>
                        <text style="fill: ]]..GHUD_AR_allies_font_color..[[; font-family: Arial, sans-serif; font-size: 28px; font-weight: 700; text-anchor: middle;" transform="matrix(0.609174, 0, 0, 0.609176, 250.000005, 210)">]].. tostring(v):sub(-3) .. [[</text>
                        </svg></div>]]
                    end
                end
                end
                end

                --hit/miss animations, radar contacts animations
                local hitsHUD = ''
                local missesHUD = ''
                local targetsHUD = ''

                if GHUD_show_hits == true then
                for k,v in pairs(lastHitTime) do
                    if lastHitTime[k] ~= nil then
                        lastHitTime[k].time = lastHitTime[k].time + 0.025
                        lastHitTime[k].hitOpacity = lastHitTime[k].hitOpacity - 0.015
                        local top = GHUD_hits_misses_Y - lastHitTime[k].time*3.25
                        local right = GHUD_hit_X + lastHitTime[k].time*2
                        if lastHitTime[k].hitOpacity <= 0 then lastHitTime[k].hitOpacity = 0 end
                        local hit = [[
                        <style>
                        .hit]]..k..[[ {
                            top: ]]..top..[[vh;
                            left: ]]..right..[[%;
                            position: absolute;
                            text-alight: center;
                            font-size: 40px;
                            font-family: verdana;
                            font-style: normal;
                            font-weight: bold;
                            color: #FFB12C;
                            opacity: ]]..lastHitTime[k].hitOpacity..[[;
                            transform: translate(-50%, -50%);
                        }
                        </style>
                        <div class="hit]]..k..[[">HIT ]]..lastHitTime[k].damage..[[ HP</div>]]
                        hits[k] = {html = hit}

                        if lastHitTime[k].time >= 2 then
                            hits[k] = {html = ''}
                            if lastHitTime[k].anims == hitAnimations then
                            hits[k] = nil
                            hits = {}
                            hitAnimations = 0
                            lastHitTime = {}
                            end
                        end
                    end
                end
                end

                if GHUD_show_misses == true then
                for k,v in pairs(lastMissTime) do
                    if lastMissTime[k] ~= nil then
                        lastMissTime[k].time = lastMissTime[k].time + 0.025
                        lastMissTime[k].missOpacity = lastMissTime[k].missOpacity - 0.015
                        local top = GHUD_hits_misses_Y - lastMissTime[k].time*3.25
                        local left = GHUD_miss_X - lastMissTime[k].time*2
                        if lastMissTime[k].missOpacity <= 0 then lastMissTime[k].missOpacity = 0 end
                        local miss = [[
                        <style>
                        .miss]]..k..[[ {
                            top: ]]..top..[[vh;
                            left: ]]..left..[[%;
                            position: absolute;
                            text-alight: center;
                            font-size: 40px;
                            font-family: verdana;
                            font-style: normal;
                            font-weight: bold;
                            color: #fc033d;
                            opacity: ]]..lastMissTime[k].missOpacity..[[;
                            transform: translate(-50%, -50%);
                        }
                        </style>
                        <div class="miss]]..k..[[">MISS</div>]]
                        misses[k] = {html = miss}

                        if lastMissTime[k].time >= 2 then
                            misses[k] = {html = ''}
                            if lastMissTime[k].anims == missAnimations then
                            misses[k] = nil
                            misses = {}
                            missAnimations = 0
                            lastMissTime = {}
                            end
                        end
                    end
                end
                end

                if GHUD_show_hits == true then
                for k,v in pairs(hits) do
                    if hits[k] ~= nil then
                        hitsHUD = hitsHUD .. hits[k].html
                    end
                end
                end

                if GHUD_show_misses == true then
                for k,v in pairs(misses) do
                    if misses[k] ~= nil then
                        missesHUD = missesHUD .. misses[k].html
                    end
                end
                end

                for k,v in pairs(target) do
                if target[k] ~= nil then
                    if target[k].left > 85 and target[k].one == true then target[k].left = target[k].left - 0.3 end
                    if target[k].left <= 85 then target[k].left = 85 target[k].one = false end
                    local div = [[
                    <style>
                    .targ]]..k..[[ {
                        position: relative;
                        color: ]]..GHUD_radar_notifications_text_color..[[;
                        top: ]]..GHUD_radar_notifications_Y..[[vh;
                        left: ]]..target[k].left..[[%;
                        opacity: ]]..target[k].opacity..[[;
                        background-color: ]]..GHUD_radar_notifications_background_color..[[;
                        border: 2px solid ]]..GHUD_radar_notifications_border_color..[[;
                        border-radius: ]]..GHUD_border_radius..[[;
                        padding: 12px;
                        margin-top: -2px;
                        font-weight: bold;
                        font-size: 20px;
                        text-align: left;
                    }
                    </style>
                    <div class="targ]]..k..[[">[]]..target[k].size1..[[] ]]..target[k].id..[[ ]]..target[k].name1..[[</div>]]
                    targets[k] = {html = div}
                    if target[k].one == false then
                        target[k].delay = target[k].delay + 1
                        if target[k].delay >= 100 then
                            target[k].opacity = target[k].opacity - 0.01
                            --Mac os notifications style
                            --if target[k].left <= 108 then target[k].left = target[k].left + 0.3 end
                            --if target[k].opacity <= 0 and target[k].left >= 100 then
                            if target[k].opacity <= 0 and target[k].cnt == count then
                            target[k] = nil
                            target = {}
                            targets = {}
                            count = 0
                            end
                        end
                    end
                end
                end

                for k,v in pairs(targets) do
                if targets[k] ~= nil then
                    targetsHUD = targetsHUD .. targets[k].html
                end
                end

                local htmlHUD = [[
                <html>
                <style>
                html,body {
                margin:0;
                padding:0;
                overflow: hidden;
                }
                .pos1 {
                position: absolute;
                left: 50%;
                top: 55%;
                text-align:center;
                font-size: 20px;
                font-style: verdana;
                font-weight: bold;
                color: white;
                transform: translate(-50%, -50%);
                }
                </style>
                <body>
                ]]..AR_allies..[[
                ]]..gunnerHUD..[[
                ]]..targetsHUD..[[
                ]]..vectorHUD..[[
                ]]..missesHUD..[[
                ]]..hitsHUD..[[
                ]]..sight..[[
                <div class="pos1">]]..pp1..[[</div>
                </body>
                </html>
                ]]

                if helper == false and helper1 == false then system.setScreen(htmlHUD) end
        onTimer:
            args: ['vectorhud']
            lua: |
                tickVector(unit,system,text)
        onTimer:
            args: ['logger']
            lua: |
                newcolor = "white"
                znak = ""
                if dist3>dist1 then dist1=dist3 newcolor = "#07e88e" znak = "↑" end
                if dist3<dist1 then dist1=dist3 newcolor = "#fc033d" znak = "↓" end
                if #loglist ~= 0 then
                    if #loglist < 4 then --system print performance
                    for i = 1, #loglist do
                        system.print(loglist[1])
                        table.remove(loglist, 1)
                    end
                    else
                    for i = 1, 4 do
                        system.print(loglist[1])
                        table.remove(loglist, 1)
                    end
                    end
                end
        onTimer:
            args: ['marker']
            lua: |
                tickMarker(unit,system,text)
        onTimer:
            args: ['cleaner']
            lua: |
                collectgarbage("collect")
    radar_1:
        onEnter(id):
            lua: |
                if construct.isInPvPZone() == 1 or GHUD_safeNotifications == true then
                t_radarEnter[id] = {pos = system.getWaypointFromPlayerPos()}
                end
        onLeave(id):
            lua: |
                if construct.isInPvPZone() == 1 or GHUD_safeNotifications == true then
                    system.playSound('leave.mp3')
                end
    radar_2:
        onEnter(id):
            lua: |
                if construct.isInPvPZone() == 1 or GHUD_safeNotifications == true then
                t_radarEnter[id] = {pos = system.getWaypointFromPlayerPos()}
                end
        onLeave(id):
            lua: |
                if construct.isInPvPZone() == 1 or GHUD_safeNotifications == true then
                    system.playSound('leave.mp3')
                end
    weapon_1:
        onHit(targetId,damage):
            lua: |
                local damage1 = math.floor(damage)
                if GHUD_show_hits == true then
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                end
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                if GHUD_show_misses == true then
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
                end
        onElementDestroyed(targetId,elementId):
            lua: |
                local element = system.getItem(elementId) --DeadRank
                local name = element['displayName']
                system.print(string.format('Destroyed %s on %s',name,activeRadar.getConstructName(targetId)))
    weapon_2:
        onHit(targetId,damage):
            lua: |
                local damage1 = math.floor(damage)
                if GHUD_show_hits == true then
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                end
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                if GHUD_show_misses == true then
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
                end
        onElementDestroyed(targetId,elementId):
            lua: |
                local element = system.getItem(elementId) --DeadRank
                local name = element['displayName']
                system.print(string.format('Destroyed %s on %s',name,activeRadar.getConstructName(targetId)))
    weapon_3:
        onHit(targetId,damage):
            lua: |
                local damage1 = math.floor(damage)
                if GHUD_show_hits == true then
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                end
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                if GHUD_show_misses == true then
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
                end
        onElementDestroyed(targetId,elementId):
            lua: |
                local element = system.getItem(elementId) --DeadRank
                local name = element['displayName']
                system.print(string.format('Destroyed %s on %s',name,activeRadar.getConstructName(targetId)))
    weapon_4:
        onHit(targetId,damage):
            lua: |
                local damage1 = math.floor(damage)
                if GHUD_show_hits == true then
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                end
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                if GHUD_show_misses == true then
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
                end
        onElementDestroyed(targetId,elementId):
            lua: |
                local element = system.getItem(elementId) --DeadRank
                local name = element['displayName']
                system.print(string.format('Destroyed %s on %s',name,activeRadar.getConstructName(targetId)))
    weapon_5:
        onHit(targetId,damage):
            lua: |
                local damage1 = math.floor(damage)
                if GHUD_show_hits == true then
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                end
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                if GHUD_show_misses == true then
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
                end
        onElementDestroyed(targetId,elementId):
            lua: |
                local element = system.getItem(elementId) --DeadRank
                local name = element['displayName']
                system.print(string.format('Destroyed %s on %s',name,activeRadar.getConstructName(targetId)))
    weapon_6:
        onHit(targetId,damage):
            lua: |
                local damage1 = math.floor(damage)
                if GHUD_show_hits == true then
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                end
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                if GHUD_show_misses == true then
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
                end
        onElementDestroyed(targetId,elementId):
            lua: |
                local element = system.getItem(elementId) --DeadRank
                local name = element['displayName']
                system.print(string.format('Destroyed %s on %s',name,activeRadar.getConstructName(targetId)))
    weapon_7:
        onHit(targetId,damage):
            lua: |
                local damage1 = math.floor(damage)
                if GHUD_show_hits == true then
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                end
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
        onElementDestroyed(targetId,elementId):
            lua: |
                local element = system.getItem(elementId) --DeadRank
                local name = element['displayName']
                system.print(string.format('Destroyed %s on %s',name,activeRadar.getConstructName(targetId)))
    construct:
        onPvPTimer(active):
            lua: |
                if active == 0 then
                    totalDamage = {}
                end
    system:
        onUpdate:
            lua: |
                if weapon_1 ~= nil then
                    mWeapons:onUpdate()
                end
        onActionStart:
            args: [option4]
            lua: |
                if gearB == true then mmode = not mmode end
        onActionStart:
            args: [option1]
            lua: |
                if shift == true then
                local id = activeRadar.getTargetId()
                if id ~= 0 then
                    local keys = databank_2.getNbKeys()
                    if whitelist[id] == true then

                        for i = 1, #GHUD_friendly_IDs do
                        if GHUD_friendly_IDs[i] == id then table.remove(GHUD_friendly_IDs,i) databank_2.clearValue(i) end
                        end
                        system.print(id..' ID has been removed from the whitelist databank')
                    else
                        local dbKey = keys + 1
                        databank_2.setIntValue(dbKey,id)
                        table.insert(GHUD_friendly_IDs,id)
                        system.print(id..' ID has been added to the whitelist databank')
                    end
                    newWhitelist = checkWhitelist()
                    whitelist = newWhitelist
                end
                end
        onActionStart:
            args: [option5]
            lua: |
                system.showScreen(0)
                system.lockView(1)
        onActionStop:
            args: [option5]
            lua: |
                system.showScreen(1)
                system.lockView(0)
        onActionStart:
            args: [straferight]
            lua: |
                if shift == true then altRIGHT(unit,system,text) end
                if gearB == true then
                    helper1 = true
                    system.setScreen('')
                end
        onActionStop:
            args: [straferight]
            lua: |
                helper1 = false
        onActionStart:
            args: [strafeleft]
            lua: |
                if shift == true then altLEFT(unit,system,text) end
                if gearB == true then
                    helper = true
                    system.setScreen(helpHTML)
                end
        onActionStop:
            args: [strafeleft]
            lua: |
                helper = false
        onActionStart:
            args: [up]
            lua: |
                upB = true
                if shift == true then altUP(unit,system,text) end
        onActionStop:
            args: [up]
            lua: |
                upB = false
        onActionStart:
            args: [down]
            lua: |
                downB = true
                if shift == true then altDOWN(unit,system,text) end
        onActionStop:
            args: [down]
            lua: |
                downB = false
        onActionStart:
            args: [groundaltitudeup]
            lua: |
                sizeState = sizeState + 1
                if sizeState == 7 then sizeState = 1 end
                defaultSize = size[sizeState]
        onActionStart:
            args: [groundaltitudedown]
            lua: |
                mRadar.friendlyMode = not mRadar.friendlyMode
        onActionStart:
            args: [antigravity]
            lua: |
                if GHUD_export_mode == false then
                    GHUD_export_mode = true
                    system.print("The export mode is enabled ALT+G")
                        else
                        GHUD_export_mode = false
                    system.print("Export mode is disabled ALT+G")
                    end
        onActionStart:
            args: [booster]
            lua: |
                if showMarker == false then 
                    showMarker = true
                    system.print("Current target position - ON")
                else 
                    showMarker = false
                    system.print("Current target position - OFF")
                end
        onActionStart:
            args: [gear]
            lua: |
                radarPos(system,radar)
                gearB = true
        onActionStop:
            args: [gear]
            lua: |
                gearB = false     
        onActionStart:
            args: [lalt]
            lua: |
                lalt=true
                if shift == true then getPipeW(system) end
        onActionStop:
            args: [lalt]
            lua: |
                lalt=false
        onActionStart:
            args: [lshift]
            lua: |
                shift=true
        onActionStop:
            args: [lshift]
            lua: |
                shift=false
        onInputText(text):
            lua: |
                local count = #string.gsub(text, "[^f]", "")
                local f1 = string.sub(text,1,1)
                if count == 1 and f1 == "f" then
                mRadar:onTextInput(text)
                end

                if text == "export" then GEAR(unit,system,text) end

                if text == "clear" then
                databank_2.clear()
                GHUD_friendly_IDs = {}
                newWhitelist = checkWhitelist()
                whitelist = newWhitelist
                system.print('Databank whitelist cleared')
                end

                if text == "addall" then
                local keys = databank_2.getNbKeys()
                local keyCount = keys
                for k,v in pairs(radarIDs) do
                    keyCount = keyCount + 1
                    databank_2.setIntValue(keyCount,v)
                    table.insert(GHUD_friendly_IDs,v)
                end
                newWhitelist = checkWhitelist()
                whitelist = newWhitelist
                system.print('All targets have been added to the whitelist')
                end

                if text == "friends" then
                if GHUD_show_AR_allies_marks == true then
                GHUD_show_AR_allies_marks = false
                system.print('AR allies marks deactivated')
                else
                GHUD_show_AR_allies_marks = true
                system.print('AR allies marks activated')
                end
                end

                if text == "safe" then
                if GHUD_safeNotifications == true then
                    GHUD_safeNotifications = false
                    system.print('Radar safe zone notifications OFF')
                else
                    GHUD_safeNotifications = true
                    system.print('Radar safe zone notifications ON')
                end
                end

                inTEXT(unit,system,text)
  