name: GHUD Solo Gunner Module v1.0.0
pvp: true

slots:
    core:
        class: CoreUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    db:
        class: DatabankUnit
        select: manual
    screen:
        class: ScreenUnit
        select: manual    

handlers:
    unit:
        start:
            lua: |

        stop:
            lua: |
                screen_1.clear()
        onTimer:
            args: ['hud']
            lua: |

        onTimer:
            args: ['vectorhud']
            lua: |
                tickVector(unit,system,text)
        onTimer:
            args: ['radar']
            lua: |
                mRadar:onUpdate()
        onTimer:
            args: ['logger']
            lua: |
                if #loglist ~= 0 then
                    if #loglist < 3 then --system print performance (spam many radar targets/warping)
                    for i = 1, #loglist do
                        system.print(loglist[1])
                        table.remove(loglist, 1)
                    end
                    else
                    for i = 1, 3 do
                        system.print(loglist[1])
                        table.remove(loglist, 1)
                    end
                    end
                end
        onTimer:
            args: ['marker']
            lua: |
                tickMarker(unit,system,text)
        onTimer:
            args: ['delay']
            lua: |
                if firstload == 0 then firstload1=firstload1+1 end
                if firstload1==5 then --5 sec radar delay for 1st run all targets fix
                firstload = 1
                unit.setTimer("hud", 0.016) --main
                if GHUD_log_stats then
                    unit.setTimer("logger", 0.5)
                end
                unit.stopTimer("delay")
                end
        onTimer:
            args: ['data']
            lua: |
                local data = weapon_1.getData()
                zone = data:match('"outOfZone":(.-),')
                local hitP = tonumber(data:match('"hitProbability":(.-),'))
                probil = math.ceil(hitP * 100)
        onTimer:
            args: ['cleaner']
            lua: |
                collectgarbage("collect")
    radar_1:
        onEnter(id):
            lua: |
                if zone == "false" and GHUD_notifications == true then
                    system.playSound('enter.mp3')
                    if firstload==1 then
                    if GHUD_log_stats then
                        t_radarEnter[id] = {pos = system.getWaypointFromPlayerPos()}
                    end
                    end
                end
        onLeave(id):
            lua: |
                if zone == "false" and GHUD_notifications == true then
                    system.playSound('leave.mp3')
                end
    weapon_1:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                local randomNumber = math.random(10000, 1000000)
                hitAnimations = hitAnimations + 1
                lastHitTime['w'..damage1..randomNumber] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
                unit.setTimer('w'..damage1..randomNumber, 0.016)
        onMissed(targetId):
            lua: |
                local miss = math.random(10000,1000000)
                missAnimations = missAnimations + 1
                lastMissTime['k'..miss] = {time = 0, missOpacity = 1, anims = missAnimations}
                unit.setTimer('k'..miss, 0.016)
    weapon_2:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                local randomNumber = math.random(10000, 1000000)
                hitAnimations = hitAnimations + 1
                lastHitTime['w'..damage1..randomNumber] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
                unit.setTimer('w'..damage1..randomNumber, 0.016)
        onMissed(targetId):
            lua: |
                local miss = math.random(10000,1000000)
                missAnimations = missAnimations + 1
                lastMissTime['k'..miss] = {time = 0, missOpacity = 1, anims = missAnimations}
                unit.setTimer('k'..miss, 0.016)
    weapon_3:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                local randomNumber = math.random(10000, 1000000)
                hitAnimations = hitAnimations + 1
                lastHitTime['w'..damage1..randomNumber] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
                unit.setTimer('w'..damage1..randomNumber, 0.016)
        onMissed(targetId):
            lua: |
                local miss = math.random(10000,1000000)
                missAnimations = missAnimations + 1
                lastMissTime['k'..miss] = {time = 0, missOpacity = 1, anims = missAnimations}
                unit.setTimer('k'..miss, 0.016)
    weapon_4:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                local randomNumber = math.random(10000, 1000000)
                hitAnimations = hitAnimations + 1
                lastHitTime['w'..damage1..randomNumber] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
                unit.setTimer('w'..damage1..randomNumber, 0.016)
        onMissed(targetId):
            lua: |
                local miss = math.random(10000,1000000)
                missAnimations = missAnimations + 1
                lastMissTime['k'..miss] = {time = 0, missOpacity = 1, anims = missAnimations}
                unit.setTimer('k'..miss, 0.016)
    weapon_5:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                local randomNumber = math.random(10000, 1000000)
                hitAnimations = hitAnimations + 1
                lastHitTime['w'..damage1..randomNumber] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
                unit.setTimer('w'..damage1..randomNumber, 0.016)
        onMissed(targetId):
            lua: |
                local miss = math.random(10000,1000000)
                missAnimations = missAnimations + 1
                lastMissTime['k'..miss] = {time = 0, missOpacity = 1, anims = missAnimations}
                unit.setTimer('k'..miss, 0.016)
    weapon_6:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                local randomNumber = math.random(10000, 1000000)
                hitAnimations = hitAnimations + 1
                lastHitTime['w'..damage1..randomNumber] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
                unit.setTimer('w'..damage1..randomNumber, 0.016)
        onMissed(targetId):
            lua: |
                local miss = math.random(10000,1000000)
                missAnimations = missAnimations + 1
                lastMissTime['k'..miss] = {time = 0, missOpacity = 1, anims = missAnimations}
                unit.setTimer('k'..miss, 0.016)
    weapon_7:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                local randomNumber = math.random(10000, 1000000)
                hitAnimations = hitAnimations + 1
                lastHitTime['w'..damage1..randomNumber] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
                unit.setTimer('w'..damage1..randomNumber, 0.016)
        onMissed(targetId):
            lua: |
                local miss = math.random(10000,1000000)
                missAnimations = missAnimations + 1
                lastMissTime['k'..miss] = {time = 0, missOpacity = 1, anims = missAnimations}
                unit.setTimer('k'..miss, 0.016)
    system:
        onUpdate:
            lua: |

        onActionStart:
            args: [option5]
            lua: |
            system.showScreen(0)
            system.lockView(1)
        onActionStop:
            args: [option5]
            lua: |
            system.showScreen(1)
            system.lockView(0)
        onActionStart:
            args: [up]
            lua: |

        onActionStop:
            args: [up]
            lua: |

        onActionStart:
            args: [down]
            lua: |

        onActionStop:
            args: [down]
            lua: |

        onActionStart:
            args: [groundaltitudeup]
            lua: |

        onActionStart:
            args: [groundaltitudedown]
            lua: |

        onActionStart:
            args: [antigravity]
            lua: |

        onInputText(text):
            lua: |
  