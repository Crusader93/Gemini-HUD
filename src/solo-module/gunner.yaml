name: GHUD Solo Gunner Module v1.0.0
pvp: true

slots:
    core:
        class: CoreUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    databank:
        class: DatabankUnit
        select: manual
    screen:
        class: ScreenUnit
        select: manual    

handlers:
    unit:
        onStart:
            lua: |

        stop:
            lua: |
                screen_1.clear()
        onTimer:
            args: ['hud']
            lua: |

        onTimer:
            args: ['vectorhud']
            lua: |
                tickVector(unit,system,text)
        onTimer:
            args: ['radar']
            lua: |
                mRadar:onUpdate()
        onTimer:
            args: ['logger']
            lua: |
                if #loglist ~= 0 then
                    if #loglist < 3 then --system print performance (spam many radar targets/warping)
                    for i = 1, #loglist do
                        system.print(loglist[1])
                        table.remove(loglist, 1)
                    end
                    else
                    for i = 1, 3 do
                        system.print(loglist[1])
                        table.remove(loglist, 1)
                    end
                    end
                end
        onTimer:
            args: ['marker']
            lua: |
                tickMarker(unit,system,text)
        onTimer:
            args: ['delay']
            lua: |
                if (system.getTime() - startTime) > 5 then
                firstload = 1
                t_radarEnter = {}
                main1 = coroutine.create(main)
                unit.setTimer("data", 0.1)
                unit.setTimer("hud", 0.016)
                if GHUD_log_stats then
                    unit.setTimer("logger", 0.5)
                end
                unit.stopTimer("delay")
                end
        onTimer:
            args: ['data']
            lua: |
                local data = weapon_1.getData()
                zone = data:match('"outOfZone":(.-),')
                local hitP = tonumber(data:match('"hitProbability":(.-),'))
                probil = math.ceil(hitP * 100)
        onTimer:
            args: ['cleaner']
            lua: |
                collectgarbage("collect")
    radar_1:
        onEnter(id):
            lua: |
                if zone == "false" and GHUD_notifications == true then
                    if firstload==1 then
                    if GHUD_log_stats then
                        t_radarEnter[id] = {pos = system.getWaypointFromPlayerPos()}
                    end
                    end
                end
        onLeave(id):
            lua: |
                if zone == "false" and GHUD_notifications == true then
                    system.playSound('leave.mp3')
                end
    weapon_1:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
    weapon_2:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
    weapon_3:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
    weapon_4:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
    weapon_5:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
    weapon_6:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
    weapon_7:
        onHit(targetId,damage):
            lua: |
                local damage1 = damage
                hitAnimations = hitAnimations + 1
                lastHitTime[hitAnimations] = {damage = damage1, time = 0, hitOpacity = 1, anims = hitAnimations}
                if totalDamage[targetId] ~= nil then --target damage calculation concept
                    totalDamage[targetId].damage = totalDamage[targetId].damage + damage1
                else
                    totalDamage[targetId] = {damage = damage1}
                end
        onMissed(targetId):
            lua: |
                missAnimations = missAnimations + 1
                lastMissTime[missAnimations] = {time = 0, missOpacity = 1, anims = missAnimations}
    construct:
        onPvPTimer(active):
            lua: |
                if active == 0 then
                    totalDamage = {}
                end
    system:
        onUpdate:
            lua: |
                mWeapons:onUpdate()
        onActionStart:
            args: [option4]
            lua: |
                mmode = not mmode
        onActionStart:
            args: [option5]
            lua: |
                system.showScreen(0)
                system.lockView(1)
        onActionStop:
            args: [option5]
            lua: |
                system.showScreen(1)
                system.lockView(0)
        onActionStart:
            args: [straferight]
            lua: |
                altRIGHT(unit,system,text)
        onActionStart:
            args: [strafeleft]
            lua: |
                altLEFT(unit,system,text)
        onActionStart:
            args: [up]
            lua: |
                buttonSpace=true
                if buttonC==true then mRadar:stopC() end
                altUP(unit,system,text)
        onActionStop:
            args: [up]
            lua: |
                buttonSpace=false
        onActionStart:
            args: [down]
            lua: |
                buttonC=true
                altDOWN(unit,system,text)
        onActionStop:
            args: [down]
            lua: |
                buttonC=false
        onActionStart:
            args: [groundaltitudeup]
            lua: |
                sizeState = sizeState + 1
                if sizeState == 7 then sizeState = 1 end
                defaultSize = size[sizeState]
                system.print(defaultSize)
        onActionStart:
            args: [groundaltitudedown]
            lua: |
                mRadar.friendlyMode = not mRadar.friendlyMode
        onActionStart:
            args: [antigravity]
            lua: |
                if GHUD_export_mode == false then
                    GHUD_export_mode = true
                    system.print("The export mode is enabled ALT+G")
                        else
                        GHUD_export_mode = false
                    system.print("Export mode is disabled ALT+G")
                    end
        onActionStart:
            args: [booster]
            lua: |
                if showMarker == false then 
                    showMarker = true
                    system.print("Current target position - ON")
                else 
                    showMarker = false
                    system.print("Current target position - OFF")
                end
        onActionStart:
            args: [gear]
            lua: |
                GEAR(unit,system,text)
        onActionStart:
            args: [lalt]
            lua: |
                lalt=true
                if shift == true then getPipeW(system) end
        onActionStop:
            args: [lalt]
            lua: |
                lalt=false
        onActionStart:
            args: [lshift]
            lua: |
                shift=true
        onActionStop:
            args: [lshift]
            lua: |
                shift=false
        onInputText(text):
            lua: |
                if text == "s" then
                    mRadar:stopC()
                    defaultRadar()
                end
                local count = #string.gsub(text, "[^f]", "")
                local f1 = string.sub(text,1,1)
                if count == 1 and f1 == "f" then
                    mRadar:onTextInput(text)
                end

                inTEXT(unit,system,text)
  